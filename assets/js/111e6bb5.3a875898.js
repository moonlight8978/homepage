(self.webpackChunkmoonlight_8978_github_io=self.webpackChunkmoonlight_8978_github_io||[]).push([[3472],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return s},kt:function(){return k}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=m(a),k=r,d=c["".concat(p,".").concat(k)]||c[k]||u[k]||l;return a?n.createElement(d,i(i({ref:t},s),{},{components:a})):n.createElement(d,i({ref:t},s))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},863:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return m},default:function(){return u}});var n=a(2122),r=a(9756),l=(a(7294),a(3905)),i=["components"],o={title:"Elastic Beanstalk notes",code:"https://github.com/moonlight8978/aws-cda-preparation/tree/beanstalk"},p={unversionedId:"aws-developer-associated/elastic-beanstalk",id:"aws-developer-associated/elastic-beanstalk",isDocsHomePage:!1,title:"Elastic Beanstalk notes",description:"- PaaS - Platform as a Service: a platform allowing customers to develop, run, manage applications without building and maintaining infrastructure",source:"@site/books/aws-developer-associated/elastic-beanstalk.md",sourceDirName:"aws-developer-associated",slug:"/aws-developer-associated/elastic-beanstalk",permalink:"/books/aws-developer-associated/elastic-beanstalk",editUrl:"https://github.com/moonlight8978/moonlight8978.github.io/edit/v2/books/books/aws-developer-associated/elastic-beanstalk.md",version:"current",lastUpdatedAt:1623052541,formattedLastUpdatedAt:"6/7/2021",frontMatter:{title:"Elastic Beanstalk notes",code:"https://github.com/moonlight8978/aws-cda-preparation/tree/beanstalk"},sidebar:"tutorialSidebar",previous:{title:"AWS Elasti Cache",permalink:"/books/aws-developer-associated/elasti-cache"},next:{title:"Elastic Load Balancer",permalink:"/books/aws-developer-associated/elb"}},m=[],s={toc:m};function u(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"PaaS - Platform as a Service: a platform allowing customers to develop, run, manage applications without building and maintaining infrastructure",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. Heroku")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},'Not recommended for "Production" (enterprise, large companies) apps')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Cost nothing to use EB, only the resources it provisions")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Powered by CloudFormation template:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"ELB"),(0,l.kt)("li",{parentName:"ul"},"Autoscaling groups"),(0,l.kt)("li",{parentName:"ul"},"RDS"),(0,l.kt)("li",{parentName:"ul"},"EC2 instances (preconfigured or custom)"),(0,l.kt)("li",{parentName:"ul"},"CloudWatch, SNS"),(0,l.kt)("li",{parentName:"ul"},"In-place, Blue/Green deployment"),(0,l.kt)("li",{parentName:"ul"},"Rotate passwords"),(0,l.kt)("li",{parentName:"ul"},"Can run dockerized environment"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Can launch either a Web Environment or a Worker Environment")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Web environment"),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("img",{parentName:"p",src:"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/images/aeb-architecture2.png",alt:"AWS Elastic Beanstalk architecture diagram"})),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The environment will face the Internet"),(0,l.kt)("li",{parentName:"ul"},"2 types:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Single-instance env: desire capacity set to 1, no ELB, use public IP address (EIP)"),(0,l.kt)("li",{parentName:"ul"},"Load balanced env: use ELB, CNAME (URL) will point to ELB"))),(0,l.kt)("li",{parentName:"ul"},"A software called Host Manager (HM) will be installed on each instance",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Deploy app"),(0,l.kt)("li",{parentName:"ul"},"Generate events"),(0,l.kt)("li",{parentName:"ul"},"Monitoring"),(0,l.kt)("li",{parentName:"ul"},"..."))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Worker environment"),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("img",{parentName:"p",src:"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/images/aeb-architecture_worker.png",alt:"       AWS Elastic Beanstalk worker tier architecture diagram     "})),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"No ELB, no face internet")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Create SQS queue, install SQS daemon on instances")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ASG scaling policy to add/remove instances based on queue size")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Workflow:"),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("img",{parentName:"p",src:"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/images/aeb-messageflow-worker.png",alt:"       Elastic Beanstalk worker environment Amazon SQS message processing      "})),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Web environment receive requests"),(0,l.kt)("li",{parentName:"ul"},"Web environment send message to SQS (using SDK)"),(0,l.kt)("li",{parentName:"ul"},"SQS daemon will send HTTP POST request to trigger the worker (run locally in instance)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Support periodic tasks")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Acknowledge: ",(0,l.kt)("inlineCode",{parentName:"p"},"200 OK")," response. Then ",(0,l.kt)("inlineCode",{parentName:"p"},"DeleteMessage")," will be sent to SQS to delete message from the queue.")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Deployment policy:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"All at once: default"),(0,l.kt)("li",{parentName:"ul"},"Rolling / Rolling with additional batch: split into batches and deploys the new version to one batch at a time",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If failed -> rolling update to old version"),(0,l.kt)("li",{parentName:"ul"},"Difference:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Rolling: Terminate then attach -> capacity reduced"),(0,l.kt)("li",{parentName:"ul"},"Rolling with additional batch: deploy new version first, then attach/terminate new batch/existing batch -> capacity not reduced"))))),(0,l.kt)("li",{parentName:"ul"},"Immutable: performs an immutable update to launch a full set of new instances running the new version of app in a seperated ASG",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If failed -> terminate ASG"),(0,l.kt)("li",{parentName:"ul"},"Safest way to deploy for critical applications"))),(0,l.kt)("li",{parentName:"ul"},"Blue/green:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Deploy 2 environments: Blue (new) and Green (old), when Blue is ready, terminate Green."),(0,l.kt)("li",{parentName:"ul"},"DNS change"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"In-Place vs Blue/Green deployment"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The context can changes the scope of what it mean"),(0,l.kt)("li",{parentName:"ul"},"Within the scope of EB env",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"In-Place: all EB deployment policies (changes occurred within EB)"),(0,l.kt)("li",{parentName:"ul"},"Blue/Green: We need 2 seperated EB env, database must placed outside. Once env is terminated, all data is lost."))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Configuration file: ",(0,l.kt)("inlineCode",{parentName:"p"},".ebextensions/.config"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Environment manifest: ",(0,l.kt)("inlineCode",{parentName:"p"},"env.yml")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"e.g."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'AWSConfigurationTemplateVersion: 1.1.0.0\nEnvironmentName: exapro-prod+\nSolutionStack: Ruby\nEnvironmentLinks:\n  "WORKERQUEUE": "worker+"\nOptionSettings:\n  aws:elb:loadbalancer:\n    CrossZone: true\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"+")," in name will enable groups"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. with the environment name ",(0,l.kt)("inlineCode",{parentName:"li"},"front+")," and the group name ",(0,l.kt)("inlineCode",{parentName:"li"},"dev")," => the environment name will be ",(0,l.kt)("inlineCode",{parentName:"li"},"front-dev")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Linux Server Configuration"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Packages: Download & install packages"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"packages:\n  yum:\n    libmemcached: []\n    ruby-devel: []\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Groups: Create unix group, assign group id"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'groups:\n  groupAdmin: {}\n  groupDev:\n    gid: "12"\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Users: Create unix user"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'users:\n  andrew:\n    groups:\n      - groupAdmin\n    uid: 87\n    homeDir: "/andrew"\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Files: Create files on the ec2 instance (inline or from URL)"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'files:\n  "/home/ec2-user/application.yml":\n    mode: "000755"\n    owner: root\n    group: root\n    content: |\n      SECRET: 000destruct0\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Execute commends before app is setup"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"commands:\n  1_project_root:\n    command: mkdir /var/www/app\n  2_link:\n    command: ln -s /var/www/app /app\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Services: which services should start/stop when the instance launch"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"services:\n  sysvinit:\n    nginx:\n      enabled: true\n      ensureRunning: true\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Container commands: execute commands that affect the app source code"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'container_commands:\n  0_collectstatic:\n    command: "django-admin.py collectstatic --noinput"\n  1_syncdb:\n    command: "django-admin.py syncdb --noinput"\n    leader_only: true\n  2_migrate:\n    command: "django-admin.py migrate"\n    leader_only: true\n'))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Custom Image: use custom AMIs instead of AWS preconfigured images => improve provisioning times"))),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://images.viblo.asia/026545c8-b4b4-4aa0-b1e6-45c3eb9169b2.png",alt:null})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"RDS:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Inside EB env: Intended for development env, if EB is terminated the database will be terminated too"),(0,l.kt)("li",{parentName:"ul"},"Outside EB env: Intended for production env"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Dockerrun.aws.json")," is similar to ECS Task Definition, which defines multi container configuration")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Practice notes:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"eb")," CLI to use CodeCommit with EB (eb will zip source code and push to S3 automatically), otherwise use S3 with .zip"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"debug ",(0,l.kt)("inlineCode",{parentName:"p"},"/var/log/eb-engine.log"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"/var/log/cfn-init.log"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"deploying app source code is at ",(0,l.kt)("inlineCode",{parentName:"p"},"/var/app/staging"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"deployed source code is at ",(0,l.kt)("inlineCode",{parentName:"p"},"/var/app/current"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"No environment variable available when SSH to instance"),(0,l.kt)("p",{parentName:"li"},"Use this command to show env available"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"/opt/elasticbeanstalk/bin/get-config --output YAML environment\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"SSL: Load Balancer required")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Sensitive env:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Using ",(0,l.kt)("inlineCode",{parentName:"li"},"eb")," CLI")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"eb setenv VAR_NAME=VAR_VALUE\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Using console"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Roles"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"EC2 instances: use aws-elasticbeanstalk-ec2-role",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Access S3, DynamoDB, X-Ray, ..."))),(0,l.kt)("li",{parentName:"ul"},"EB environment itself: aws-elasticbeanstack-service-role",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Create ASG, Launch EC2 instance, create DB, ALB, ..."))),(0,l.kt)("li",{parentName:"ul"},"Monitoring service-linked role",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Is a unique type of IAM role that is linked directly to an AWS service")))))))))}u.isMDXComponent=!0}}]);