(self.webpackChunkmoonlight_8978_github_io=self.webpackChunkmoonlight_8978_github_io||[]).push([[1958],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return c},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(a),d=r,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return a?n.createElement(k,o(o({ref:t},c),{},{components:a})):n.createElement(k,o({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7561:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var n=a(2122),r=a(9756),i=(a(7294),a(3905)),o=["components"],l={title:"Elastic Container Service",code:"N/A"},s={unversionedId:"aws-developer-associated/ecs",id:"aws-developer-associated/ecs",isDocsHomePage:!1,title:"Elastic Container Service",description:"- Cluster: House of docker containers",source:"@site/books/aws-developer-associated/ecs.md",sourceDirName:"aws-developer-associated",slug:"/aws-developer-associated/ecs",permalink:"/books/aws-developer-associated/ecs",editUrl:"https://github.com/moonlight8978/moonlight8978.github.io/edit/v2/books/books/aws-developer-associated/ecs.md",version:"current",lastUpdatedAt:1623052541,formattedLastUpdatedAt:"6/7/2021",frontMatter:{title:"Elastic Container Service",code:"N/A"},sidebar:"tutorialSidebar",previous:{title:"AWS EC2",permalink:"/books/aws-developer-associated/ec2"},next:{title:"AWS Elasti Cache",permalink:"/books/aws-developer-associated/elasti-cache"}},p=[],c={toc:p};function u(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://images.viblo.asia/af3a7ac2-ff6f-46e4-afdd-ca285f959a13.png",alt:null})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Cluster: House of docker containers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Task definition: JSON configuration of (upto 10) containers"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "containerDefinitions": [\n    {\n      "name": "wordpress",\n      "links": ["mysql"],\n      "image": "wordpress",\n      "essential": true,\n      "portMappings": [\n        {\n          "containerPort": 80,\n          "hostPort": 80\n        }\n      ],\n      "memory": 500,\n      "cpu": 10\n    },\n    {\n      // ...\n    }\n  ],\n  "family": "hello_world"\n}\n')),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Image can be stored in ECR or any registry"),(0,i.kt)("li",{parentName:"ul"},"One essential container is required. If this container failes or stops then all other containers will be stopped"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Task: Launches containers defined in Task Definition"),(0,i.kt)("p",{parentName:"li"},"Task do not remaining running once complete")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Service: Ensure tasks is keep running, desired counts, ... (eg. webapp)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Container agent: installed on each ec2 instance, which start/stop containers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Create ECS cluster:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Cluster"),(0,i.kt)("li",{parentName:"ul"},"IAM role"),(0,i.kt)("li",{parentName:"ul"},"CloudFormation stack"),(0,i.kt)("li",{parentName:"ul"},"Task definition"),(0,i.kt)("li",{parentName:"ul"},"Service"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Create services:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"EC2 based: container run on docker on ec2 instances"),(0,i.kt)("li",{parentName:"ul"},"Fargate: Serverless, pays and containers run",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Cold start: after a period of inactivity, AWS will drop the container, our function will become inactivity (aka ",(0,i.kt)("strong",{parentName:"li"},"cold"),"). A cold start happens when we execute an inactivity function")))),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{parentName:"p",src:"https://images.viblo.asia/a488d4d1-8e48-46c8-97ea-aa7be004a726.png",alt:null})),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Replicas"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Resource reservation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Pay at least 1 minute, and every additional second")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"EC2 Practical notes:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"When create EC2 ECS Cluster, AWS will create a CloudFormation stack"),(0,i.kt)("li",{parentName:"ul"},"Container instance that run the ECS container agent will requires ecsInstanceRole (ECS, EC2, ECR, CloudWatch)"),(0,i.kt)("li",{parentName:"ul"},"Login to ECR:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"aws ecr get-login-password | docker login --username AWS --password-stdin <repo_link>\n"))),(0,i.kt)("li",{parentName:"ul"},"Sensitive env variables can be stored at Parameter Store, ECS will inject those vars to container at runtime"),(0,i.kt)("li",{parentName:"ul"},"Command is comma seperated ",(0,i.kt)("inlineCode",{parentName:"li"},"yarn,start")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"EC2 with ALB practical notes:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"1 service - 1 target group"),(0,i.kt)("li",{parentName:"ul"},"Target group used for ECS should have 0 associated instances because ECS will assign instances automatically when service starts"),(0,i.kt)("li",{parentName:"ul"},"In task definition, keep Host port blank will tell ECS to map Host port automatically (random), and those ports will be mapped to target group instances"),(0,i.kt)("li",{parentName:"ul"},"Delete ECS service will not delete ALB resources")))),(0,i.kt)("h1",{id:"todo"},"TODO"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Replica mode (multiple containers) vs Daemon mode (auto replicas)")))}u.isMDXComponent=!0}}]);