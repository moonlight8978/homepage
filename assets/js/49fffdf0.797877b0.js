(self.webpackChunkmoonlight_8978_github_io=self.webpackChunkmoonlight_8978_github_io||[]).push([[4569],{3905:function(t,e,a){"use strict";a.d(e,{Zo:function(){return d},kt:function(){return m}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function c(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var l=n.createContext({}),s=function(t){var e=n.useContext(l),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},d=function(t){var e=s(t.components);return n.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,i=t.originalType,l=t.parentName,d=c(t,["components","mdxType","originalType","parentName"]),u=s(a),m=r,b=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return a?n.createElement(b,o(o({ref:e},d),{},{components:a})):n.createElement(b,o({ref:e},d))}));function m(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=a.length,o=new Array(i);o[0]=u;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c.mdxType="string"==typeof t?t:r,o[1]=c;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2521:function(t,e,a){"use strict";a.r(e),a.d(e,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var n=a(2122),r=a(9756),i=(a(7294),a(3905)),o=["components"],c={},l={unversionedId:"ruby/action-text",id:"ruby/action-text",isDocsHomePage:!1,title:"ActionText",description:"Last updated: 2019-07-19",source:"@site/docs/ruby/action-text.md",sourceDirName:"ruby",slug:"/ruby/action-text",permalink:"/docs/ruby/action-text",editUrl:"https://github.com/moonlight8978/moonlight8978.github.io/edit/v2/docs/docs/ruby/action-text.md",version:"current",lastUpdatedAt:1624004023,formattedLastUpdatedAt:"6/18/2021",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/docs/intro"},next:{title:"ActiveStorage",permalink:"/docs/ruby/active-storage"}},s=[{value:"Save data",id:"save-data",children:[]}],d={toc:s};function p(t){var e=t.components,a=(0,r.Z)(t,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Last updated: 2019-07-19")),(0,i.kt)("h2",{id:"save-data"},"Save data"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Request params with action text will look like this")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'{\n  content: "<div>asdfadsfda<figure data-trix-attachment=\\"{&quot;contentType&quot;:&quot;text/javascript&quot;,&quot;filename&quot;:&quot;script.js&quot;,&quot;filesize&quot;:1217,&quot;sgid&quot;:&quot;BAh7CEkiCGdpZAY6BkVUSSIvZ2lkOi8vYXBwL0FjdGl2ZVN0b3JhZ2U6OkJsb2IvMz9leHBpcmVzX2luBjsAVEkiDHB1cnBvc2UGOwBUSSIPYXR0YWNoYWJsZQY7AFRJIg9leHBpcmVzX2F0BjsAVDA=--89f739b2109a23cb410bfdb2d0a9954bcae01719&quot;,&quot;url&quot;:&quot;http://localhost:60100/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBDQT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--ace3e1f00074b3a489a892e68492b8372f799727/script.js&quot;}\\" data-trix-content-type=\\"text/javascript\\" class=\\"attachment attachment--file attachment--js\\"><figcaption class=\\"attachment__caption\\"><span class=\\"attachment__name\\">script.js</span> <span class=\\"attachment__size\\">1.19 KB</span></figcaption></figure></div>"\n}\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Rails will try to find all attachments to attach to ",(0,i.kt)("inlineCode",{parentName:"li"},"ActiveText::RichText")," record under ",(0,i.kt)("inlineCode",{parentName:"li"},"embeds")," attribute.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# https://github.com/rails/rails/blob/027085a5972a798cfea60f829a9edabbd67a2818/actiontext/app/models/action_text/rich_text.rb#L17\nbefore_save do\n  self.embeds = body.attachables.grep(ActiveStorage::Blob).uniq if body.present?\nend\n")),(0,i.kt)("p",null,"To achieve that."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Rails will initialize ActionText::Content instance from params")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# https://github.com/rails/rails/blob/027085a5972a798cfea60f829a9edabbd67a2818/actiontext/app/models/action_text/rich_text.rb#L11\nserialize :body, ActionText::Content\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Then, Rails looks up all DOM node (Nokogiri) with ",(0,i.kt)("inlineCode",{parentName:"li"},"ActionText::Attachment::SELECTOR"),", with ",(0,i.kt)("inlineCode",{parentName:"li"},"sgid"),", Rails can find appropriate ActiveStorage records.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'# https://github.com/rails/rails/blob/027085a5972a798cfea60f829a9edabbd67a2818/actiontext/lib/action_text/content.rb#L53\ndef attachables\n  @attachables ||= attachment_nodes.map do |node|\n    ActionText::Attachable.from_node(node)\n  end\nend\n\n# https://github.com/rails/rails/blob/027085a5972a798cfea60f829a9edabbd67a2818/actiontext/lib/action_text/content.rb#L113\ndef attachment_nodes\n  @attachment_nodes ||= fragment.find_all(ActionText::Attachment::SELECTOR)\nend\n\n# https://github.com/rails/rails/blob/027085a5972a798cfea60f829a9edabbd67a2818/actiontext/lib/action_text/attachable.rb#L10\ndef from_node(node)\n  if attachable = attachable_from_sgid(node["sgid"])\n    attachable\n  elsif attachable = ActionText::Attachables::ContentAttachment.from_node(node)\n    attachable\n  elsif attachable = ActionText::Attachables::RemoteImage.from_node(node)\n    attachable\n  else\n    ActionText::Attachables::MissingAttachable\n  end\nend\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Rails save ",(0,i.kt)("inlineCode",{parentName:"li"},"ActionText::RichText")," record with body look like:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'body = \'<div>asdfadsfda<action-text-attachment sgid="BAh7CEkiCGdpZAY6BkVUSSIvZ2lkOi8vYXBwL0FjdGl2ZVN\n0b3JhZ2U6OkJsb2IvMz9leHBpcmVzX2luBjsAVEkiDHB1cnBvc2UGOwBUSSIPYXR0YWNoYWJsZQY7AFRJIg9leHBpcmVzX2F0BjsAVDA=-\n-89f739b2109a23cb410bfdb2d0a9954bcae01719" content-type="text/javascript" url="http://localhost:60100/rail\ns/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBDQT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--a\nce3e1f00074b3a489a892e68492b8372f799727/script.js" filename="script.js" filesize="1217"></action-text-atta\nchment></div>\'\n')),(0,i.kt)("p",null,"To achieve this, Rails minify ",(0,i.kt)("inlineCode",{parentName:"p"},"action-text-attachment")," directive"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'# https://github.com/rails/rails/blob/027085a5972a798cfea60f829a9edabbd67a2818/actiontext/lib/action_text/attachments/minification.rb#L9\ndef fragment_by_minifying_attachments(content)\n  Fragment.wrap(content).replace(ActionText::Attachment::SELECTOR) do |node|\n    node.tap { |n| n.inner_html = "" }\n  end\nend\n')),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"To show ",(0,i.kt)("inlineCode",{parentName:"li"},"rich_text")," in view, Rails will expand ",(0,i.kt)("inlineCode",{parentName:"li"},"action-text-attachment")," directive by using this method")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'# https://github.com/rails/rails/blob/027085a5972a798cfea60f829a9edabbd67a2818/actiontext/app/helpers/action_text/content_helper.rb#L20\ndef render_action_text_attachments(content)\n  content.render_attachments do |attachment|\n    unless attachment.in?(content.gallery_attachments)\n      attachment.node.tap do |node|\n        node.inner_html = render(attachment, in_gallery: false).chomp\n      end\n    end\n  end.render_attachment_galleries do |attachment_gallery|\n    render(layout: attachment_gallery, object: attachment_gallery) do\n      attachment_gallery.attachments.map do |attachment|\n        attachment.node.inner_html = render(attachment, in_gallery: true).chomp\n        attachment.to_html\n      end.join("").html_safe\n    end.chomp\n  end\nend\n')))}p.isMDXComponent=!0}}]);