(self.webpackChunkmoonlight_8978_github_io=self.webpackChunkmoonlight_8978_github_io||[]).push([[6422],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),h=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=h(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),s=h(n),m=a,g=s["".concat(c,".").concat(m)]||s[m]||u[m]||l;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=s;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var h=2;h<l;h++)i[h]=n[h];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},554:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return c},toc:function(){return h},default:function(){return u}});var r=n(2122),a=n(9756),l=(n(7294),n(3905)),i=["components"],o={slug:"cung-tim-hieu-ve-puma-ruby-on-rails",title:"C\xf9ng t\xecm hi\u1ec3u v\u1ec1 Puma (Ruby on Rails)",author:"L\xea S\u0129 B\xedch",author_title:"Ruby on Rails/React Developer",author_url:"https://github.com/moonlight8978",author_image_url:"https://avatars.githubusercontent.com/u/26299310?v=4",tags:["puma","ruby-on-rails","multi-threading","multi-processing"]},c={permalink:"/blog/cung-tim-hieu-ve-puma-ruby-on-rails",editUrl:"https://github.com/moonlight8978/moonlight8978.github.io/edit/v2/blog/blog/2021-05-31-rails-puma.md",source:"@site/blog/2021-05-31-rails-puma.md",title:"C\xf9ng t\xecm hi\u1ec3u v\u1ec1 Puma (Ruby on Rails)",description:"1. M\u1edf \u0111\u1ea7u",date:"2021-05-31T00:00:00.000Z",formattedDate:"May 31, 2021",tags:[{label:"puma",permalink:"/blog/tags/puma"},{label:"ruby-on-rails",permalink:"/blog/tags/ruby-on-rails"},{label:"multi-threading",permalink:"/blog/tags/multi-threading"},{label:"multi-processing",permalink:"/blog/tags/multi-processing"}],readingTime:10.165,truncated:!1,prevItem:{title:"WebSocket ho\u1ea1t \u0111\u1ed9ng nh\u01b0 th\u1ebf n\xe0o?",permalink:"/blog/websocket-hoat-dong-nhu-the-nao"},nextItem:{title:"C\u01b0\u1ee1i React Native xem Appium (Ph\u1ea7n 1 - C\xf9ng t\xecm hi\u1ec3u c\xe1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a Appium)",permalink:"/blog/cuoi-react-native-xem-appium-phan-1-cung-tim-hieu-cach-hoat-dong-cua-appium"}},h=[{value:"1. M\u1edf \u0111\u1ea7u",id:"1-m\u1edf-\u0111\u1ea7u",children:[]},{value:"2. Multi-processing v\xe0 Multi-threading",id:"2-multi-processing-v\xe0-multi-threading",children:[{value:"2.1. Puma d\xf9ng lo\u1ea1i n\xe0o?",id:"21-puma-d\xf9ng-lo\u1ea1i-n\xe0o",children:[]},{value:"2.2. Multi-threading",id:"22-multi-threading",children:[]},{value:"2.3. Multi-processing",id:"23-multi-processing",children:[]}]},{value:"3. K\u1ebft lu\u1eadn",id:"3-k\u1ebft-lu\u1eadn",children:[]},{value:"4. Tham kh\u1ea3o",id:"4-tham-kh\u1ea3o",children:[]}],p={toc:h};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"1-m\u1edf-\u0111\u1ea7u"},"1. M\u1edf \u0111\u1ea7u"),(0,l.kt)("p",null,"Ch\u1eafc h\u1eb3n Puma kh\xf4ng ph\u1ea3i m\u1ed9t c\xe1i t\xean xa l\u1ea1 \u0111\u1ed1i v\u1edbi m\u1ed7i Rails developer, m\u1ed9t ph\u1ea7n c\u0169ng v\xec \u0111\xe2y l\xe0 appserver m\u1eb7c \u0111\u1ecbnh khi t\u1ea1o m\u1edbi m\u1ed9t project Rails."),(0,l.kt)("p",null,"H\xe3y c\xf9ng nh\xecn qua nh\u1eefng config c\u01a1 b\u1ea3n khi ch\u1ea1y 1 \u1ee9ng d\u1ee5ng Rails v\u1edbi Puma server. ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/rails/rails/blob/0f5700ac3589081126fbfde1e4037dc1d4166cce/railties/lib/rails/generators/rails/app/templates/config/puma.rb.tt"},"link")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby",metastring:"title=config/puma.rb",title:"config/puma.rb"},'max_threads_count = ENV.fetch("RAILS_MAX_THREADS") { 5 }\nmin_threads_count = ENV.fetch("RAILS_MIN_THREADS") { max_threads_count }\nthreads min_threads_count, max_threads_count\n\nworker_timeout 3600 if ENV.fetch("RAILS_ENV", "development") == "development"\n\nport ENV.fetch("PORT") { 3000 }\n\nenvironment ENV.fetch("RAILS_ENV") { "development" }\n\npidfile ENV.fetch("PIDFILE") { "tmp/pids/server.pid" }\n\nworkers ENV.fetch("WEB_CONCURRENCY") { 2 }\n\npreload_app!\n\nplugin :tmp_restart\n')),(0,l.kt)("p",null,"\u0110\u1ed1i v\u1edbi nh\u1eefng ng\u01b0\u1eddi m\u1edbi b\u1eaft \u0111\u1ea7u, khi deploy puma, c\xf3 l\u1ebd s\u1ebd t\u1eeb ch\u1ed1i hi\u1ec3u \u0111\u1ed1ng config tr\xean v\xe0 set m\u1ed9t s\u1ed1 bi\u1ebfn m\xf4i tr\u01b0\u1eddng nh\u01b0 sau:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"WEB_CONCURRENCY"),": b\u1eb1ng v\u1edbi s\u1ed1 l\u01b0\u1ee3ng vcore/process c\u1ee7a m\xe1y"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RAILS_MAX_THREADS"),": \u1edd th\xec nhi\u1ec1u RAM th\xec set 16, 32 cho o\xe1ch, kh\xf4ng th\xec th\xf4i d\xf9ng m\u1eb7c \u0111\u1ecbnh 5 v\xe0 m\u1eb7c do d\xf2ng \u0111\u1eddi x\xf4 \u0111\u1ea9y :v")),(0,l.kt)("p",null,"H\xe3y c\xf9ng t\xecm hi\u1ec3u th\xeam v\u1ec1 Puma \u0111\u1ec3 g\xf3p ph\u1ea7n l\xe0m ch\u1ee7 t\u1eebng d\xf2ng code trong app c\u1ee7a ch\xfang ta."),(0,l.kt)("h2",{id:"2-multi-processing-v\xe0-multi-threading"},"2. Multi-processing v\xe0 Multi-threading"),(0,l.kt)("h3",{id:"21-puma-d\xf9ng-lo\u1ea1i-n\xe0o"},"2.1. Puma d\xf9ng lo\u1ea1i n\xe0o?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Khi ch\u1ea1y 1 Rails app m\u1edbi t\u1ea1o, h\xe3y \u0111\u1ec3 \xfd l\xfac boot server, b\u1ea1n s\u1ebd th\u1ea5y:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-log"},'Puma starting in single mode...\n* Puma version: 5.3.1 (ruby 3.0.1-p64) ("Sweetnighter")\n*  Min threads: 5\n*  Max threads: 5\n*  Environment: development\n*          PID: 1\n* Listening on http://0.0.0.0:3000\nUse Ctrl-C to stop\n')),(0,l.kt)("p",null,"\u0110\xe2y l\xe0 d\u1ea5u hi\u1ec7u cho ta th\u1ea5y, Rails \u0111ang ch\u1ea1y \u1edf ch\u1ebf \u0111\u1ed9 single process (1 process), v\xe0 multi-thread (c\u1ee5 th\u1ec3 l\xe0 5 thread)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"C\xf2n khi config deploy, c\xf3 th\u1ec3 b\u1ea1n s\u1ebd \u0111\u01b0\u1ee3c 1 ng\u01b0\u1eddi c\xf3 kinh nghi\u1ec7m h\u01a1n b\u1ea3o r\u1eb1ng ",(0,l.kt)("em",{parentName:"li"},'"B\u1ecf comment c\xe1i d\xf2ng ',(0,l.kt)("inlineCode",{parentName:"em"},'workers ENV.fetch("WEB_CONCURRENCY") { 2 }'),' \u0111i em \xeai"'))),(0,l.kt)("p",null,"V\xe0 \u0111\xe2y l\xe0 k\u1ebft qu\u1ea3 khi ta l\xe0m nh\u01b0 v\u1eady"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-log"},'[1] Puma starting in cluster mode...\n[1] * Puma version: 5.3.1 (ruby 3.0.1-p64) ("Sweetnighter")\n[1] *  Min threads: 5\n[1] *  Max threads: 5\n[1] *  Environment: development\n[1] *   Master PID: 1\n[1] *      Workers: 2\n[1] *     Restarts: (\ufffd\ufffd\ufffd) hot (\ufffd\ufffd\ufffd) phased\n[1] * Preloading application\n[1] * Listening on htp://0.0.0.0:3000\n[1] Use Ctrl-C to stop\n[1] - Worker 0 (PID: 16) booted in 0.02s, phase: 0\n[1] - Worker 1 (PID: 17) booted in 0.05s, phase: 0\n')),(0,l.kt)("p",null,"Puma \u0111ang ch\u1ea1y \u0111\u1ed3ng th\u1eddi multi-process (2 process) v\xe0 multi-thread (5 thread)"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Multi-process, multi-thread l\xe0 c\xe1i c\u1ee7a n\u1ee3 g\xec v\u1eady?")),(0,l.kt)("p",null,"Ch\xfang ta s\u1ebd t\xecm hi\u1ec3u v\u1ec1 n\xf3 ngay sau \u0111\xe2y. Tuy nhi\xean ch\xfang ta s\u1ebd focus v\xe0o cluster mode c\u1ee7a Puma nh\xe9."),(0,l.kt)("h3",{id:"22-multi-threading"},"2.2. Multi-threading"),(0,l.kt)("p",null,"Tr\u01b0\u1edbc ti\xean ta h\xe3y nh\u1edb l\u1ea1i \u0111\u1ecbnh ngh\u0129a v\u1ec1 ",(0,l.kt)("inlineCode",{parentName:"p"},"process")," - ti\u1ebfn tr\xecnh, m\u1ed7i khi ta ch\u1ea1y 1 command n\xe0o \u0111\xf3 (v\xed d\u1ee5 nh\u01b0 ",(0,l.kt)("inlineCode",{parentName:"p"},"ruby xxx.rb")," hay b\u1eadt chrome ch\u1eb3ng h\u1ea1n), OS s\u1ebd t\u1ea1o 1 process \u0111\u1ec3 x\u1eed l\xfd command c\u1ee7a ta."),(0,l.kt)("p",null,"M\u1ed7i ",(0,l.kt)("em",{parentName:"p"},"process")," c\xf3 th\u1ec3 t\u1ea1o ra nhi\u1ec1u ",(0,l.kt)("em",{parentName:"p"},"thread")," \u0111\u1ec3 x\u1eed l\xfd task (v\xed d\u1ee5 m\u1ed7i tab chrome \u0111\u01b0\u1ee3c handle b\u1edfi 1 thread). C\xe1c thread \u0111\u01b0\u1ee3c t\u1ea1o b\u1edfi 1 process s\u1ebd share nhau 1 v\xf9ng nh\u1edb (memory), trong shared memory n\xe0y, m\u1ed7i thread s\u1ebd c\xf3 stack, register (google \u0111\u1ec3 bi\u1ebft th\xeam \u0111\u1ed1ng n\xe0y l\xe0 g\xec =)) ) ri\xeang c\u1ee7a m\xecnh. Tuy nhi\xean, vi\u1ec7c chung \u0111\u1ee5ng memory nh\u01b0 tr\xean s\u1ebd d\u1eabn \u0111\u1ebfn 1 v\u1ea5n \u0111\u1ec1 l\xe0 nhi\u1ec1u thread c\xf9ng ch\u1ecdc t\u1edbi 1 resource n\xe0o \u0111\xf3, d\u1eabn t\u1edbi conflict v\u1ec1 data, hay c\xf2n \u0111\u01b0\u1ee3c bi\u1ebft \u0111\u1ebfn v\u1edbi c\xe1i t\xean nguy hi\u1ec3m h\u01a1n l\xe0 ",(0,l.kt)("strong",{parentName:"p"},"race condition"),". Code c\u1ee7a ta s\u1ebd c\u1ea7n ",(0,l.kt)("em",{parentName:"p"},"thread-safe")," (c\xe1c b\u1ea1n c\xf3 th\u1ec3 google th\xeam :v)"),(0,l.kt)("p",null,"\u0110\u1ed1i v\u1edbi \u1ee9ng d\u1ee5ng Ruby th\xec khi ch\u1ea1y \u1edf m\xf4i tr\u01b0\u1eddng MRI... \xc0 \u0111\u1ea5y l\u1ea1i nh\u1eafc t\u1edbi MRI, ch\u1eafc nhi\u1ec1u ng\u01b0\u1eddi s\u1ebd th\u1eafc m\u1eafc li\u1ec7u \u0111\xf3 l\xe0 g\xec. \u0110\xe2y l\xe0 t\xean c\u1ee7a 1 Ruby Runtime. Ruby 1 chu\u1ea9n spec, implement ki\u1ec3u g\xec c\u0169ng \u0111\u01b0\u1ee3c, mi\u1ec5n l\xe0 \u0111\xe1p \u1ee9ng \u0111\u01b0\u1ee3c spec \u0111\xf3 th\xec \u0111\u1ec1u l\xe0 Ruby. C\xf3 th\u1ec3 k\u1ec3 \u0111\u1ebfn c\xe1c Runtime ph\u1ed5 bi\u1ebfn sau"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"MRI - aka CRuby: Matz\u2019s Ruby Interpreter (Matz - hay Matsumoto Yukihiro) l\xe0 ng\u01b0\u1eddi t\u1ea1o ra runtime n\xe0y, \u0111\u01b0\u1ee3c vi\u1ebft b\u1eb1ng C, n\xean c\xf2n g\u1ecdi l\xe0 CRuby"),(0,l.kt)("p",{parentName:"li"},"\u0110a s\u1ed1 l\xe0 d\xf9ng MRI")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"JRuby: Ruby implement b\u1eb1ng Java")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Rubinius")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"mruby")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"..."))),(0,l.kt)("p",null,"MRI c\xf3 1 c\u01a1 ch\u1ebf l\xe0 ",(0,l.kt)("strong",{parentName:"p"},"Global Interpreter Lock")," (GIL), khi ch\u1ea1y multi-thread, n\xf3 ch\u1ec9 cho ph\xe9p 1 thread ch\u1ea1y source code Ruby t\u1ea1i 1 th\u1eddi \u0111i\u1ec3m, n\xean l\xe0 ta c\xf3 nhi\u1ec1u thread \u0111i ch\u0103ng n\u1eefa th\xec c\u0169ng ch\u1ec9 c\xf3 1 thread \u0111\u01b0\u1ee3c ch\u1ea1y m\xe0 th\xf4i."),(0,l.kt)("p",null,"Tuy nhi\xean v\u1edbi c\xe1c thao t\xe1c IO nh\u01b0 \u0111\u1ecdc DB, request external resource, \u0111\u1ecdc ghi file, ... th\xec GIL kh\xf4ng block. Puma \u0111\xe3 t\u1eadn d\u1ee5ng \u0111i\u1ec1u n\xe0y, khi 1 thread \u0111ang x\u1eed l\xfd IO, n\xf3 s\u1ebd quay tr\u1edf l\u1ea1i x\u1eed l\xfd \u1edf process, nh\u1eadn th\xeam c\xe1c request kh\xe1c \u0111\u1ec3 x\u1eed l\xfd."),(0,l.kt)("p",null,"Ch\xednh v\xec v\u1eady, ngay c\u1ea3 khi ch\u1ec9 ch\u1ea1y \u1edf single mode, Puma v\u1eabn c\xf3 th\u1ec3 handle \u0111\u01b0\u1ee3c concurrent request. Tuy nhi\xean v\u1edbi c\xe1c request c\u1ea7n th\u1eddi gian d\xe0i \u0111\u1ec3 x\u1eed l\xfd, do ch\u1ec9 c\xf3 1 thread \u0111\u01b0\u1ee3c ch\u1ea1y, n\xean request sau s\u1ebd ph\u1ea3i ch\u1edd request tr\u01b0\u1edbc x\u1eed l\xfd xong, d\u1eabn \u0111\u1ebfn Puma b\u1ecb th\u1ecdt trong tr\u01b0\u1eddng h\u1ee3p n\xe0y."),(0,l.kt)("p",null,"Ta c\xf3 th\u1ec3 ki\u1ec3m tra v\u1ec1 tr\u1ea1ng th\xe1i c\xe1c thread c\u1ee7a Puma b\u1eb1ng \u0111o\u1ea1n code sau:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby",metastring:"title=app/controllers/homes_controller.rb",title:"app/controllers/homes_controller.rb"},'class HomesController < ApplicationController\n  def show\n    Thread.list.select { |t| t.name&.match?(/puma threadpool \\d+/) }.each do |t|\n      Rails.logger.info("Thread #{t.name}: #{t.status}, alive: #{t.alive?}, current: #{t == Thread.current}")\n    end\n    head :ok\n  end\nend\n')),(0,l.kt)("p",null,"V\xec sao l\u1ea1i l\xe0 ",(0,l.kt)("inlineCode",{parentName:"p"},"/puma threadpool \\d+/"),"? C\xe1c b\u1ea1n c\xf3 th\u1ec3 xem t\u1ea1i ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/puma/puma/blob/3e80f7c704e5585da4faa32edf0fa7a0abed3689/lib/puma/thread_pool.rb#L104"},"\u0111\xe2y"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby",metastring:"title=config/routes.rb",title:"config/routes.rb"},"Rails.application.routes.draw do\n  resource :home\nend\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby",metastring:"title=config/puma.rb",title:"config/puma.rb"},"max_threads_count = ENV.fetch('RAILS_MAX_THREADS', 5)\nmin_threads_count = ENV.fetch('RAILS_MIN_THREADS') { max_threads_count }\nthreads min_threads_count, max_threads_count\nworker_timeout 3600 if ENV.fetch('RAILS_ENV', 'development') == 'development'\nport ENV.fetch('PORT', 3000)\nenvironment ENV.fetch('RAILS_ENV', 'development')\npidfile ENV.fetch('PIDFILE', 'tmp/pids/server.pid')\nplugin :tmp_restart\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-curl"},"curl http://localhost:3000/home\ntail -n 50 log/development.log\n")),(0,l.kt)("p",null,"V\xe0 \u0111\xe2y l\xe0 output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-log"},"Thread puma threadpool 001: sleep, alive: true, current: false\nThread puma threadpool 002: sleep, alive: true, current: false\nThread puma threadpool 003: sleep, alive: true, current: false\nThread puma threadpool 004: sleep, alive: true, current: false\nThread puma threadpool 005: run, alive: true, current: true\n")),(0,l.kt)("p",null,"\u0110\xf3 ch\xednh l\xe0 5 thread c\u1ee7a ch\xfang ta, nh\u01b0 v\xed d\u1ee5 l\xe0 thread 5 \u0111ang ti\u1ebfn h\xe0nh x\u1eed l\xfd request, c\xf2n nh\u1eefng thread kh\xe1c n\u1ebfu r\u1ea3nh n\xf3 s\u1ebd \u1edf tr\u1ea1ng th\xe1i ",(0,l.kt)("inlineCode",{parentName:"p"},"sleep"),". \u1ede \u0111\xe2y c\xf3 1 \u0111i\u1ec3m \u0111\xe1ng ch\xfa \xfd l\xe0 sau khi k\u1ebft th\xfac request, thread kh\xf4ng b\u1ecb kill m\xe0 ch\u1ec9 v\u1ec1 tr\u1ea1ng th\xe1i ",(0,l.kt)("inlineCode",{parentName:"p"},"sleep"),", do v\u1eady n\u1ebfu ta tu\u1ef3 ti\u1ec7n modify bi\u1ebfn global, n\xf3 s\u1ebd \u1ea3nh h\u01b0\u1edfng t\u1edbi request ti\u1ebfp theo m\xe0 thread \u0111\xf3 handle."),(0,l.kt)("p",null,"V\xed d\u1ee5:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"before_action :set_locale\n\ndef set_locale\n  I18n.locale = params[:locale] || I18n.default_locale\nend\n")),(0,l.kt)("p",null,"Kh\xf4ng c\u1ea7n bi\u1ebft code c\xe1i g\xec, nh\u01b0ng modify 1 bi\u1ebfn global t\u1ea1i runtime nh\u01b0 tr\xean l\xe0 \u0111\xe3 th\u1ea5y nguy hi\u1ec3m r\u1ed3i. V\xe0 ta h\xe3y ti\u1ebfn h\xe0nh test xem"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby",metastring:"title=app/controllers/homes_controller.rb",title:"app/controllers/homes_controller.rb"},'class HomesController < ApplicationController\n  def show\n    Thread.current.tap { |t| Rails.logger.info("Current thread #{t.name}: #{t.status}, alive: #{t.alive?}") }\n    Rails.logger.info("Before: #{I18n.locale}")\n    I18n.locale = params[:locale]\n    Rails.logger.info("After: #{I18n.locale}")\n    head :ok\n  end\nend\n')),(0,l.kt)("p",null,"r\u1ed3i sau \u0111\xf3 spam kho\u1ea3ng ch\u1ee5c c\xe1i request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:3000/home?locale=vi\n")),(0,l.kt)("p",null,"v\xe0 ta s\u1ebd th\u1ea5y k\u1ebft qu\u1ea3 nh\u01b0 sau"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-log",metastring:"title=log/development.log",title:"log/development.log"},"Current thread puma threadpool 003: run, alive: true\nBefore: en\nAfter: vi\n\nCurrent thread puma threadpool 003: run, alive: true\nBefore: vi\nAfter: vi\n")),(0,l.kt)("p",null,"C\xf3 th\u1ec3 d\u1ec5 d\xe0ng nh\u1eadn ra r\u1eb1ng vi\u1ec7c set ",(0,l.kt)("inlineCode",{parentName:"p"},'I18n.locale = "vi"')," \u1edf request tr\u01b0\u1edbc \u0111\xe3 b\u1ecb leak sang request sau. N\u1ebfu \u1edf t\u1ea5t c\u1ea3 c\xe1c request, tr\u01b0\u1edbc khi x\u1eed l\xfd ta \u0111\u1ec1u set ",(0,l.kt)("inlineCode",{parentName:"p"},"I18n.locale")," th\xec vi\u1ec7c leak tr\xean s\u1ebd \xedt \u1ea3nh h\u01b0\u1edfng h\u01a1n."),(0,l.kt)("p",null,"Tuy nhi\xean h\xe3y th\u1eed t\u01b0\u1edfng t\u01b0\u1ee3ng khi app c\u1ee7a b\u1ea1n c\xf3 ch\u1ee9a c\u1ea3 code admin v\xe0 api, b\xean admin c\xf3 th\u1ec3 \u0111\u1ed5i ng\xf4n ng\u1eef, c\xf2n api th\xec kh\xf4ng, th\xec k\u1ebft qu\u1ea3 s\u1ebd ra sao. Khi admin \u0111\u1ed5i ng\xf4n ng\u1eef, t\xecnh c\u1edd, 1 user v\xf4 ph\xfac n\xe0o \u0111\xf3 request t\u1edbi tr\xfang c\xe1i thread v\u1eeba handle vi\u1ec7c admin \u0111\u1ed5i ng\xf4n ng\u1eef, v\xe0 API s\u1ebd tr\u1ea3 v\u1ec1 locale c\u1ee7a \xf4ng admin kia :v"),(0,l.kt)("p",null,"Ch\xednh v\xec v\u1eady, \u1edf docs c\u1ee7a Rails c\u0169ng c\xf3 recommend ch\xfang ta x\u1eed l\xfd chuy\u1ec3n locale b\u1eb1ng ",(0,l.kt)("inlineCode",{parentName:"p"},"I18n.with_locale"),", c\xe1c b\u1ea1n c\xf3 th\u1ec3 xem t\u1ea1i ",(0,l.kt)("a",{parentName:"p",href:"https://guides.rubyonrails.org/i18n.html#managing-the-locale-across-requests"},"\u0111\xe2y")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"around_action :switch_locale\n\ndef switch_locale(&action)\n  locale = params[:locale] || I18n.default_locale\n  I18n.with_locale(locale, &action)\nend\n")),(0,l.kt)("p",null,"T\xfam v\xe1y l\u1ea1i l\xe0 multi-threading h\u1ed7 tr\u1ee3 concurrent r\u1ea5t t\u1ed1t, tuy nhi\xean c\u0169ng \u1ea9n ch\u1ee9a 1 v\xe0i v\u1ea5n \u0111\u1ec1. N\xean s\u1ebd c\u1ea7n ch\xfa \xfd h\u01a1n khi code."),(0,l.kt)("h3",{id:"23-multi-processing"},"2.3. Multi-processing"),(0,l.kt)("p",null,"M\xe1y t\xednh hi\u1ec7n nay \u0111a s\u1ed1 \u0111\u1ec1u c\xf3 kh\xe1 nhi\u1ec1u core, v\xe0 \u0111\u1ec1u h\u1ed7 tr\u1ee3 \u0111a nhi\u1ec7m \u0111\u1ec3 t\u1ed1i \u01b0u ho\xe1 vi\u1ec7c x\u1eed l\xfd song song. V\u1eady v\u1edbi webserver th\xec sao? C\xf3 c\u1ea7n ch\u1ee9, multi-processing gi\xfap ta c\xf3 th\u1ec3 x\u1eed l\xfd th\xeam nhi\u1ec1u request \u0111\u1ed3ng th\u1eddi h\u01a1n n\u1eefa. Tr\u1eeb khi server c\u1ee7a ta qu\xe1 y\u1ebfu, ch\u1ee9 kh\xf4ng th\xec t\u1ed9i g\xec, nh\xe0 ch\u1ea3 c\xf3 g\xec ngo\xe0i core m\xe0 l\u1ea1i ch\u1ea1y \u0111\u01a1n nh\xe2n th\xec ph\xed c\u1ee7a gi\u1eddi qu\xe1 :v"),(0,l.kt)("p",null,"M\u1eb7c \u0111\u1ecbnh Puma s\u1ebd ch\u1ea1y \u1edf single mode, khi \u0111\xf3 ch\u1ec9 c\xf3 1 process, process n\xe0y s\u1ebd \u0111\u1ea3m nh\u1eadn h\u1ebft t\u1eeb vi\u1ec7c l\u01b0u code c\u1ee7a app, ti\u1ebfp nh\u1eadn request, ... sau \u0111\xf3 s\u1ebd \u0111\u1ea9y request sang cho c\xe1c thread x\u1eed l\xfd nh\u01b0 \u0111\xe3 m\xf4 t\u1ea3 \u1edf tr\xean."),(0,l.kt)("p",null,"C\xf2n \u0111\u1ed1i v\u1edbi cluster mode, tr\u01b0\u1edbc h\u1ebft Puma s\u1ebd t\u1ea1o ra m\u1ed9t master process. T\u1eeb process n\xe0y, d\u1ef1a v\xe0o gi\xe1 tr\u1ecb c\u1ee7a config d\u01b0\u1edbi, Puma s\u1ebd ",(0,l.kt)("em",{parentName:"p"},"fork")," \u0111\u1ec3 t\u1ea1o ra s\u1ed1 process t\u01b0\u01a1ng \u1ee9ng, hay c\xf2n g\u1ecdi l\xe0 ",(0,l.kt)("em",{parentName:"p"},"worker"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby",metastring:"title=config/puma.rb",title:"config/puma.rb"},'workers ENV.fetch("WEB_CONCURRENCY") { 2 }\n')),(0,l.kt)("p",null,"L\u1ea1i n\xf3i v\u1ec1 fork, \u0111\xe2y l\xe0 qu\xe1 tr\xecnh m\xe0 1 process t\u1ea1o ra 1 process m\u1edbi, g\u1ecdi l\xe0 ",(0,l.kt)("em",{parentName:"p"},"child process"),". M\u1ed7i child process \u0111\u1ec1u c\xf3 process id (PID) ri\xeang bi\u1ec7t, v\xe0 m\u1ed9t m\xf4i tr\u01b0\u1eddng ri\xeang t\xe1ch bi\u1ec7t ho\xe0n to\xe0n v\u1edbi parent process (source code, memory, stack, ...). Kh\xf4ng nh\u01b0 thread v\u1eabn share code v\u1edbi process, nh\u01b0ng c\xf3 stack, register ri\xeang. Do v\u1eady, c\xf3 th\u1ec3 n\xf3i forking an to\xe0n v\xe0 b\u1ea3o m\u1eadt h\u01a1n so v\u1edbi multi-thread."),(0,l.kt)("p",null,"Quay tr\u1edf l\u1ea1i v\u1edbi Puma, \u1edf cluster mode, master process ch\u1ec9 \u0111\u1ea3m nh\u1eadn vi\u1ec7c ti\u1ebfp nh\u1eadn request, sau \u0111\xf3 s\u1ebd b\u1eafn sang c\xe1c worker \u0111\u1ec3 ch\xfang t\u1ef1 x\u1eed v\u1edbi c\xe1c thread m\xe0 ch\xfang spawn. C\xe1c worker c\u1ee7a Puma \u0111\u1ec1u c\xf3 1 b\u1ea3n copy source code app ri\xeang, n\xean khi ch\u1ea1y nhi\u1ec1u worker, h\xe3y ch\u1eafc ch\u1eafn l\xe0 server c\u1ee7a b\u1ea1n c\xf3 \u0111\u1ee7 RAM :v"),(0,l.kt)("p",null,"\u1ede Ruby, c\xf3 th\u1ec3 ki\u1ec3m tra xem app c\u1ee7a ta \u0111ang ch\u1ea1y \u1edf process n\xe0o b\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"Process.pid  # Current child process\nProcess.ppid # Parent process\n")),(0,l.kt)("p",null,"H\xe3y th\u1eed \u1edf app Rails c\u1ee7a ta xem"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby",metastring:"title=app/controllers/homes_controller.rb",title:"app/controllers/homes_controller.rb"},'class HomesController < ApplicationController\n  def show\n    Rails.logger.info("Current: #{Process.pid}. Parent: #{Process.ppid}")\n    head :ok\n  end\nend\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby",metastring:"title=config/puma.rb",title:"config/puma.rb"},"# ...\nworkers 2\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-log",metastring:"title=log/development.log",title:"log/development.log"},"Processing by HomesController#show as */*\nCurrent: 128. Parent: 1\n\nProcessing by HomesController#show as */*\nCurrent: 129. Parent: 1\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"ps aux\n# USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n# root         1  0.5  7.1 236000 145864 pts/0   Ssl+ 03:28   0:04 puma 5.3.1 (tcp://0.0.0.0:3000) [app]\n# root         7  0.0  0.1   3544  3192 pts/1    Ss   03:29   0:00 zsh\n# root       128  0.0  6.9 288680 142008 pts/0   Sl+  03:29   0:00 puma: cluster worker 0: 1 [app]\n# root       129  0.0  6.9 288720 142116 pts/0   Sl+  03:29   0:00 puma: cluster worker 1: 1 [app]\n# root       219  0.0  0.0   1640   856 pts/1    R+   03:40   0:00 ps aux\n")),(0,l.kt)("h2",{id:"3-k\u1ebft-lu\u1eadn"},"3. K\u1ebft lu\u1eadn"),(0,l.kt)("p",null,"C\u1ea3 multi-threading v\xe0 multi-processing \u0111\u1ec1u quan tr\u1ecdng, ch\xfang g\xf3p ph\u1ea7n gi\xfap app ta x\u1eed l\xfd \u0111c concurrent request. Hy v\u1ecdng b\xe0i vi\u1ebft c\xf3 th\u1ec3 gi\xfap \xedch cho c\xe1c b\u1ea1n \xedt nhi\u1ec1u."),(0,l.kt)("p",null,"Ngo\xe0i ra, v\u1ec1 v\u1ea5n \u0111\u1ec1 set s\u1ed1 worker v\xe0 thread \u1edf ph\u1ea7n \u0111\u1ea7u \u0111\xe3 n\xf3i, t\u1ed1t nh\u1ea5t ch\u1eafc v\u1eabn l\xe0:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"WEB_CONCURRENCY")," = vcore, ngo\xe0i ra c\xf2n ph\u1ee5 thu\u1ed9c v\xe0o RAM n\u1eefa"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RAILS_MAX_THREADS")," kh\xf4ng c\xf3 con s\u1ed1 c\u1ee5 th\u1ec3, ph\u1ee5 thu\u1ed9c v\xe0o RAM v\xe0 CPU, nhi\u1ec1u RAM, CPU kho\u1ebb th\xec set \u0111\u01b0\u1ee3c c\xe0ng nhi\u1ec1u, nh\u01b0ng c\u0169ng kh\xe1 l\xe0 h\xean xui, ph\u1ea3i ti\u1ebfn h\xe0nh test r\u1ed3i m\u1edbi c\u0103n ch\u1ec9nh con s\u1ed1 ph\xf9 h\u1ee3p \u0111\u01b0\u1ee3c =))")),(0,l.kt)("p",null,"N\u1ebfu c\xf3 sai s\xf3t g\xec c\xe1c b\u1ea1n c\u1ee9 g\u1ea1ch \u0111\xe1 tho\u1ea3i m\xe1i \xe0 :v chi ti\u1ebft c\xf3 th\u1ec3 tham kh\u1ea3o \u1edf ",(0,l.kt)("a",{parentName:"p",href:"https://devcenter.heroku.com/articles/deploying-rails-applications-with-the-puma-web-server#workers"},"\u0111\xe2y")),(0,l.kt)("h2",{id:"4-tham-kh\u1ea3o"},"4. Tham kh\u1ea3o"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.speedshop.co/2015/07/29/scaling-ruby-apps-to-1000-rpm.html"},"https://www.speedshop.co/2015/07/29/scaling-ruby-apps-to-1000-rpm.html")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://devcenter.heroku.com/articles/concurrency-and-database-connections"},"https://devcenter.heroku.com/articles/concurrency-and-database-connections")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://devcenter.heroku.com/articles/deploying-rails-applications-with-the-puma-web-server"},"https://devcenter.heroku.com/articles/deploying-rails-applications-with-the-puma-web-server")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"http://www.geekride.com/fork-forking-vs-threading-thread-linux-kernel/"},"http://www.geekride.com/fork-forking-vs-threading-thread-linux-kernel/")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.studytonight.com/operating-system/multithreading"},"https://www.studytonight.com/operating-system/multithreading")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.tutorialspoint.com/how-to-create-a-process-in-linux#:~:text=A%20new%20process%20can%20be,newly%20is%20called%20child%20process"},"https://www.tutorialspoint.com/how-to-create-a-process-in-linux#:~:text=A%20new%20process%20can%20be,newly%20is%20called%20child%20process"),".")))}u.isMDXComponent=!0}}]);