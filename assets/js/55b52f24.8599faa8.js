(self.webpackChunkmoonlight_8978_github_io=self.webpackChunkmoonlight_8978_github_io||[]).push([[1541],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return u},kt:function(){return k}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(a),k=i,c=d["".concat(p,".").concat(k)]||d[k]||m[k]||l;return a?n.createElement(c,r(r({ref:t},u),{},{components:a})):n.createElement(c,r({ref:t},u))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6322:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return s},default:function(){return m}});var n=a(2122),i=a(9756),l=(a(7294),a(3905)),r=["components"],o={title:"DynamoDB",code:"N/A"},p={unversionedId:"aws-developer-associated/dynamo-db",id:"aws-developer-associated/dynamo-db",isDocsHomePage:!1,title:"DynamoDB",description:"Overview",source:"@site/books/aws-developer-associated/dynamo-db.md",sourceDirName:"aws-developer-associated",slug:"/aws-developer-associated/dynamo-db",permalink:"/books/aws-developer-associated/dynamo-db",editUrl:"https://github.com/moonlight8978/moonlight8978.github.io/edit/v2/books/books/aws-developer-associated/dynamo-db.md",version:"current",lastUpdatedAt:1623052541,formattedLastUpdatedAt:"6/7/2021",frontMatter:{title:"DynamoDB",code:"N/A"},sidebar:"tutorialSidebar",previous:{title:"AWS Cognito",permalink:"/books/aws-developer-associated/cognito"},next:{title:"AWS EC2",permalink:"/books/aws-developer-associated/ec2"}},s=[],u={toc:s};function m(e){var t=e.components,a=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"overview"},"Overview"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"NoSQL, key-value and document database"),(0,l.kt)("li",{parentName:"ul"},"Pay for capacity, no need to worry about infrastructure",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Read capacity: RCU"),(0,l.kt)("li",{parentName:"ul"},"Write capacity: WCU")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"All data is stored on SSD storage and is spread across 3 different AZs"),(0,l.kt)("li",{parentName:"ul"},"No limit when set to On-Demand mode, can be switched to Provisioned, and vice-versa mode every 24 hour"),(0,l.kt)("li",{parentName:"ul"},"Concept: Items (Rows) and Attributes (Columns)")),(0,l.kt)("h4",{id:"read-consistency"},"Read consistency"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Data is copied to 3 AZs => It is possible for data being inconsistent during copying")),(0,l.kt)("h6",{id:"eventual-consistent-reads-default"},"Eventual Consistent Reads (DEFAULT)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"When data is updated, it is possible to read and return an inconsistent copy")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Read is fast but there is no guarantee of consistent")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Copies of data will be generally consistent after 1 second"))),(0,l.kt)("h6",{id:"strongly-consistent-reads"},"Strongly Consistent Reads"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"When data is being updated, it will not return until all copies are consistent"),(0,l.kt)("li",{parentName:"ul"},"Guarantee of consistent, but high latency (slower)"),(0,l.kt)("li",{parentName:"ul"},"Copies of data will be consistent with a guarantee of 1 second")),(0,l.kt)("h4",{id:"dynamodb-partitions"},"DynamoDB Partitions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Partition is an allocation of storage for a table, automatically replicated across multiple AZs"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Slice table into smaller chunk of data (a partition)"),(0,l.kt)("li",{parentName:"ul"},"Speeds up reads"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Automatically created as the growth of data")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"2 cases when a partition will be created"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Every 10GB of data"),(0,l.kt)("li",{parentName:"ul"},"RCUs (3000) or WCUs (1000) is exceed for a single partition"),(0,l.kt)("li",{parentName:"ul"},"When DynamoDB sees a pattern of a hot partition, it will split the partition to fix the issue")))),(0,l.kt)("h4",{id:"data-type"},"Data type"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Number")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"String")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Binary"))),(0,l.kt)("h4",{id:"primary-keys"},"Primary keys"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Determine ",(0,l.kt)("strong",{parentName:"p"},"how and where")," data will be stored in partition")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Cannot be changed")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Partition key: which partition should be written to, also known as Hash"),(0,l.kt)("p",{parentName:"li"},"Sort key: How data should be sorted on partition, also known as Range")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Using only partition key: Simple primary key"),(0,l.kt)("p",{parentName:"li"},"Using both partition key and sort key: Composite Primary Key"))),(0,l.kt)("h6",{id:"simple-primary-key"},"Simple Primary Key"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Data (Partition Key + Value) => Internal Hash Function => Partition")),(0,l.kt)("h6",{id:"composite-primary-key"},"Composite Primary Key"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Data (Partition Key + Sort key + Value) => Internal Hash Function => Partition"),(0,l.kt)("li",{parentName:"ul"},"The combination must be unique"),(0,l.kt)("li",{parentName:"ul"},"Same partition key => Same parition, sorted A-Z")),(0,l.kt)("h6",{id:"primary-key-design"},"Primary Key Design"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"As distinct as posible"),(0,l.kt)("li",{parentName:"ul"},"Should evenly divide data")),(0,l.kt)("h4",{id:"query-and-scan"},"Query and scan"),(0,l.kt)("h6",{id:"query"},"Query"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Find items based on primary key value"),(0,l.kt)("li",{parentName:"ul"},"Query any table or secondary index that has a composite primary key"),(0,l.kt)("li",{parentName:"ul"},"Eventual Consistent Read by default (changable)"),(0,l.kt)("li",{parentName:"ul"},"Returns all attributes by default (changable)"),(0,l.kt)("li",{parentName:"ul"},"Sort ASC by default (changable)")),(0,l.kt)("h6",{id:"scan"},"Scan"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Scan through all items, then returns 1 or more items using filter"),(0,l.kt)("li",{parentName:"ul"},"Return all attributes by default"),(0,l.kt)("li",{parentName:"ul"},"Can be performed on tables or secondary indexes"),(0,l.kt)("li",{parentName:"ul"},"Scan operations are sequential. Speed up scan through parallel scans using Segment and TotalSegments"),(0,l.kt)("li",{parentName:"ul"},"Should be avoid when possible",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Query is much effecient"),(0,l.kt)("li",{parentName:"ul"},"Take longer time as the growth of table"),(0,l.kt)("li",{parentName:"ul"},"Single scan can burn all provisioned throughput"))),(0,l.kt)("li",{parentName:"ul"},"DB should be design in such way that primary access pattern do not use scans"),(0,l.kt)("li",{parentName:"ul"},"Scan should be needed sparingly, like infrequent report"),(0,l.kt)("li",{parentName:"ul"},"One of the most expensive ways to access data in DynamoDB")),(0,l.kt)("h4",{id:"provisioned-capacity"},"Provisioned Capacity"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Is the maximum amount of read/write operations per second from a table or index: RCUs, WCUs"),(0,l.kt)("li",{parentName:"ul"},"Get ",(0,l.kt)("inlineCode",{parentName:"li"},"ProvisionedThroughputExceededException")," when go beyond (throttling)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Requests that are throttled will be dropped, result in data loss")))),(0,l.kt)("h6",{id:"on-demand"},"On-demand"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Pay for what you used"),(0,l.kt)("li",{parentName:"ul"},"The throughput is limited by the default upper limit for a table: 40.000 RCUs/WCUs"),(0,l.kt)("li",{parentName:"ul"},"There's no hard limit imposed by the user")),(0,l.kt)("h4",{id:"calculating-readwrite"},"Calculating Read/Write"),(0,l.kt)("h6",{id:"rcus"},"RCUs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Represents:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"1 strongly consistent read per second, or 2 eventual consistent reads per second"),(0,l.kt)("li",{parentName:"ul"},"for an item up to 4KB in size"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Example:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"10RCUs: 10 (1x10) SCRs or 20 (2x10) ECRs per seconds at 4 (4x1) KB (or less) per item"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Calculating:"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:"center"},"SCR"),(0,l.kt)("th",{parentName:"tr",align:"center"},"ECR"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"50 Reads at 40KB per item"),(0,l.kt)("td",{parentName:"tr",align:"center"},"(40 / 4) ","*"," 50 = 500"),(0,l.kt)("td",{parentName:"tr",align:"center"},"(40 / 4) ","*"," 50 / 2 = 250")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"10 Reads at 6KB per item"),(0,l.kt)("td",{parentName:"tr",align:"center"},"(8 / 4) ","*"," 10 = 20"),(0,l.kt)("td",{parentName:"tr",align:"center"},"(8 / 4) ","*"," 10 / 2 = 10")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"33 Reads at 17KB per item"),(0,l.kt)("td",{parentName:"tr",align:"center"},"(20 / 4) ","*"," 33 = 165"),(0,l.kt)("td",{parentName:"tr",align:"center"},"(20 / 4) ","*"," 33 / 2 = 82.5 ~ 83")))))),(0,l.kt)("h6",{id:"wcus"},"WCUs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Represents:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"1 write per second"),(0,l.kt)("li",{parentName:"ul"},"for an item up to 1KB"))),(0,l.kt)("li",{parentName:"ul"},"Example: 10WCUs = 10 write per second at 1KB (or less) per item"),(0,l.kt)("li",{parentName:"ul"},"Calculating:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"50 writes at 40KB per item: 50 ","*"," 40 = 2000 WCUs")))),(0,l.kt)("h4",{id:"global-tables"},"Global Tables"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Multi-region, multi-master database"),(0,l.kt)("li",{parentName:"ul"},"Requires:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"KMS CMK"),(0,l.kt)("li",{parentName:"ul"},"Enable Streams"),(0,l.kt)("li",{parentName:"ul"},"Stream Type of New and Old image")))),(0,l.kt)("h4",{id:"transaction"},"Transaction"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Using ",(0,l.kt)("inlineCode",{parentName:"li"},"TransactWriteItems"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},"TransactReadItems")," allow for all-or-nothing changes to multiple items both within and across tables"),(0,l.kt)("li",{parentName:"ul"},"DynamoDB performs 2 read and write of every item in the transaction (visible in CloudWatch metrics)",(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"one to prepare the transaction"),(0,l.kt)("li",{parentName:"ol"},"one to commit the transaction")))),(0,l.kt)("h4",{id:"time-to-live-ttl"},"Time to live (TTL)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"TTL let the item in DynamoDB expire in the given time"),(0,l.kt)("li",{parentName:"ul"},"Keep database small, manageable, suited for temporary continuous data",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Session data, event log, ...")))),(0,l.kt)("h4",{id:"dynamodb-streams"},"DynamoDB Streams"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Modification is captured and send to Lambda function",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Sent in batch"),(0,l.kt)("li",{parentName:"ul"},"Near real-time"),(0,l.kt)("li",{parentName:"ul"},"Stream records appear in the same sequence as the actual modifications"))),(0,l.kt)("li",{parentName:"ul"},"Do not consume RCUs")),(0,l.kt)("h4",{id:"errors"},"Errors"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ThrottlingException"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"CreateTable"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"UpdateTable"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},"DeleteTable")," too rapidly"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ProvisionedThroughputExceededException"),":",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"AWS SDK will retry automatically")))),(0,l.kt)("h4",{id:"dynamodb-indexes"},"DynamoDB indexes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"2 types"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Global Secondary Index: GSI",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Cannot provide strong consistency"),(0,l.kt)("li",{parentName:"ul"},"The query on the index can across all partitions of the table"),(0,l.kt)("li",{parentName:"ul"},"No size restriction"),(0,l.kt)("li",{parentName:"ul"},"Have their own throughput settings"),(0,l.kt)("li",{parentName:"ul"},"Limit to 20 per table (default)"),(0,l.kt)("li",{parentName:"ul"},"Can be added or deleted at anytime"),(0,l.kt)("li",{parentName:"ul"},"The partition key should be different from the base table"),(0,l.kt)("li",{parentName:"ul"},"The sort key is optional"),(0,l.kt)("li",{parentName:"ul"},"Can only request the attributes that are projected to the index"))),(0,l.kt)("li",{parentName:"ul"},"Local Secondary Index: LSI",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Can provide strong consistency"),(0,l.kt)("li",{parentName:"ul"},"Every partition of an LSI is scoped to a base table partition that has the same partition key value"),(0,l.kt)("li",{parentName:"ul"},"The total size of indexed items for any one partition key value cannot exceed 10GB"),(0,l.kt)("li",{parentName:"ul"},"Up to 5 LSI per table (default)"),(0,l.kt)("li",{parentName:"ul"},"Shares provisioned throughputs for R/W with the table it is indexing"),(0,l.kt)("li",{parentName:"ul"},"Created with the initial table, and cannot be added or deleted after creation"),(0,l.kt)("li",{parentName:"ul"},"LSI need both partition key (must be the same as the base table) and sort key (should be different from the base table)"),(0,l.kt)("li",{parentName:"ul"},"Query one partition of table")))),(0,l.kt)("p",{parentName:"li"},"=> GSI is recommended over LSI (?)"))),(0,l.kt)("h4",{id:"dynamodb-accelerator-dax"},"DynamoDB Accelerator (DAX)"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://images.viblo.asia/42c3315e-92b3-46d7-8e7a-4d2f04764fe3.png",alt:null})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"DAX Cluster: One or more nodes"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"1 primary node"),(0,l.kt)("li",{parentName:"ul"},"Additional nodes serve as read replicas"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Fast response"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"DynamoDB: can be single-digit milliseconds"),(0,l.kt)("li",{parentName:"ul"},"With DAX: microseconds"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Reads are eventually consistent")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Good for:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Apps requires fastest response as possible"),(0,l.kt)("li",{parentName:"ul"},"Read a small number of times more oftenly than others"),(0,l.kt)("li",{parentName:"ul"},"Read-intensive, but cost-sensitive"),(0,l.kt)("li",{parentName:"ul"},"Repeat reads against a larget set of data"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"NG for:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"requires strongly consistent reads"),(0,l.kt)("li",{parentName:"ul"},"Write-intensive"),(0,l.kt)("li",{parentName:"ul"},"Consider using ElastiCache")))),(0,l.kt)("h4",{id:"cli"},"CLI"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"put-item")," replace exist item, or add new item"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"update-item")," update exist item, or add new"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"batch-get-item")," get multiple items, up to 16MB of data, which contains as many as 100 items"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"batch-write-item")," put/delete multiple items, up to 16MB of data, which comprise as many as 25 put or delete request. Invidual item to be written can be as large as 400KB")),(0,l.kt)("h4",{id:"practical-note"},"Practical note:"),(0,l.kt)("p",null,"TODO:"))}m.isMDXComponent=!0}}]);