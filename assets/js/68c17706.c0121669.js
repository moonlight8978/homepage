(self.webpackChunkmoonlight_8978_github_io=self.webpackChunkmoonlight_8978_github_io||[]).push([[7069],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return u},kt:function(){return d}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=n,k=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return a?r.createElement(k,l(l({ref:t},u),{},{components:a})):r.createElement(k,l({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8903:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var r=a(2122),n=a(9756),i=(a(7294),a(3905)),l=["components"],o={title:"AWS X-Ray",code:"https://github.com/moonlight8978/aws-cda-preparation/tree/xray"},s={unversionedId:"aws-developer-associated/x-ray",id:"aws-developer-associated/x-ray",isDocsHomePage:!1,title:"AWS X-Ray",description:"* To analyze and debug microservice system",source:"@site/books/aws-developer-associated/x-ray.md",sourceDirName:"aws-developer-associated",slug:"/aws-developer-associated/x-ray",permalink:"/books/aws-developer-associated/x-ray",editUrl:"https://github.com/moonlight8978/moonlight8978.github.io/edit/v2/books/books/aws-developer-associated/x-ray.md",version:"current",lastUpdatedAt:1623052541,formattedLastUpdatedAt:"6/7/2021",frontMatter:{title:"AWS X-Ray",code:"https://github.com/moonlight8978/aws-cda-preparation/tree/xray"},sidebar:"tutorialSidebar",previous:{title:"AWS Virtual Private Cloud",permalink:"/books/aws-developer-associated/vpc"},next:{title:"High Performance MySQL",permalink:"/books/database/high-performance-mysql"}},p=[],u={toc:p};function m(e){var t=e.components,a=(0,n.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To analyze and debug ",(0,i.kt)("strong",{parentName:"p"},"microservice")," system")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"X-Ray is a distributed tracing system")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Alternative apps - Cloud Monitoring / Application Performance Monitoring Services (APMs): Datadog, New Relic, ..."))),(0,i.kt)("h1",{id:"definitions"},"Definitions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Distributed Tracing",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"aka Distributed request tracing"),(0,i.kt)("li",{parentName:"ul"},"Is a method used to profile and monitor app (espicially microservices architecture app)"),(0,i.kt)("li",{parentName:"ul"},"Helps pinpoint wher failures occur and what causes poor performance"))),(0,i.kt)("li",{parentName:"ul"},"Performance Monitoring:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Monitor and management of performance and availability of software apps"))),(0,i.kt)("li",{parentName:"ul"},"Instrumenting:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The ability to monitor/measure product performance, to diagnose errors, and write trace information")))),(0,i.kt)("h1",{id:"anatomy"},"Anatomy"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://images.viblo.asia/ff0d7b62-cfb9-45a7-b6da-033d32ca9b80.png",alt:null})),(0,i.kt)("h4",{id:"x-ray-sdk"},"X-Ray SDK"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Interceptors")," to trace incoming HTTP requests"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Client handlers")," to instrument calls to other AWS Services"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"HTTP Client")," to instrument calls to other internal or external HTTP web services")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const app = express()\nconst AWSXRay = require('aws-xray-sdk')\n\napp.use(AWSXRay.express.openSegment(\"MyApp\"))\n\napp.get(\"/\", (req, res) => res.render('index'))\n\napp.use(AWSXRay.express.closeSegment())\n")),(0,i.kt)("h4",{id:"x-ray-daemon"},"X-Ray Daemon"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"SDK sends JSON segment documents to a daemon running in instances (or something) (UDP traffic)"),(0,i.kt)("li",{parentName:"ul"},"Upload documents to X-Ray in batches")),(0,i.kt)("h1",{id:"concepts"},"Concepts"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"X-Ray receives services data as ",(0,i.kt)("strong",{parentName:"li"},"segments")),(0,i.kt)("li",{parentName:"ul"},"X-Ray groups segments that have a common request into ",(0,i.kt)("strong",{parentName:"li"},"traces")),(0,i.kt)("li",{parentName:"ul"},"X-Ray process the traces to generate ",(0,i.kt)("strong",{parentName:"li"},"service graph"))),(0,i.kt)("h1",{id:"todo"},"TODO"),(0,i.kt)("p",null,"Build a RoR application using container, deploy to EC2 using docker-compose."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"External: MySQL (RDS), S3"),(0,i.kt)("li",{parentName:"ul"},"Features: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Sign up, login"),(0,i.kt)("li",{parentName:"ul"},"CRUD users"),(0,i.kt)("li",{parentName:"ul"},"User login history"),(0,i.kt)("li",{parentName:"ul"},"User avatar"))),(0,i.kt)("li",{parentName:"ul"},"Basic auth")),(0,i.kt)("p",null,"Apply X-Ray to monitor the app"),(0,i.kt)("h1",{id:"components"},"Components"),(0,i.kt)("h4",{id:"segments"},"Segments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Request/Response details: Hostname, IP, Origin, Duration, ..."),(0,i.kt)("li",{parentName:"ul"},"Segment ID")),(0,i.kt)("h4",{id:"subsegments"},"Subsegments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Provide more information about downstream calls to fulfill the original request",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"HTTP request to other API"),(0,i.kt)("li",{parentName:"ul"},"Database query"),(0,i.kt)("li",{parentName:"ul"},"...")))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://images.viblo.asia/c2505efb-4bbe-4246-8465-a88c7453b490.png",alt:null})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Arbitrary subsegments can be defined to instrument specific functions")),(0,i.kt)("h4",{id:"trace"},"Trace"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Trace ID"),(0,i.kt)("li",{parentName:"ul"},"Collect all segments generated by a single request")),(0,i.kt)("h4",{id:"sampling"},"Sampling"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Use a ",(0,i.kt)("strong",{parentName:"p"},"sampling algorithm")," to determine which requests get traces")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Default sampling rule: The first request each second, and 5% of any additional requests"),(0,i.kt)("p",{parentName:"li"},"=> Reduce the amount of traces => Save money"))),(0,i.kt)("h4",{id:"trace-header"},"Trace Header"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"All requests are traced, up to a configurable minimum"),(0,i.kt)("p",{parentName:"li"},"After reaching that minimum, a percentage of requests are traced (to void unnecessary cost)"),(0,i.kt)("p",{parentName:"li"},"The sampling decision and trace ID are added to HTTP request (called tracing headers) - ",(0,i.kt)("strong",{parentName:"p"},"X-Amzn-Trace-Id")))),(0,i.kt)("h4",{id:"filter-expression"},"Filter expression"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Allow to narrow down specific paths or users")),(0,i.kt)("h4",{id:"groups"},"Groups"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Allow save FilterExpressions to filter traces quickly")),(0,i.kt)("h4",{id:"annotations-and-metadata"},"Annotations and Metadata"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Extra data can be added to segment document as annotation and metadata"),(0,i.kt)("li",{parentName:"ul"},"Annotations and metadata are aggregated at the trace level"),(0,i.kt)("li",{parentName:"ul"},"Annotation are indexed for use with filter expressions => Use filter expression to gruop traces",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Up to 50 annotations per trace"))),(0,i.kt)("li",{parentName:"ul"},"Metadata are not indexed")),(0,i.kt)("h4",{id:"errors-faults-and-exceptions"},"Errors, faults, and Exceptions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Errors: 400/4XX errors"),(0,i.kt)("li",{parentName:"ul"},"Fault: 500/5XX errors"),(0,i.kt)("li",{parentName:"ul"},"Throttle: 429 Too Many Requests")),(0,i.kt)("h1",{id:"practical-notes"},"Practical notes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"XRay SDK Ruby: "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Custom daemon address: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/aws/aws-xray-sdk-ruby/issues/25"},"https://github.com/aws/aws-xray-sdk-ruby/issues/25"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Install XRay: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon-ec2.html"},"https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon-ec2.html"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Service: ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo service xray status"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"One-off tasks like ",(0,i.kt)("inlineCode",{parentName:"p"},"db:create"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"db:migrate")," will throw error ",(0,i.kt)("inlineCode",{parentName:"p"},"XRay::ContextMissingError: Can not find any active segment or subsegment.")),(0,i.kt)("p",{parentName:"li"},"=> Add ",(0,i.kt)("inlineCode",{parentName:"p"},"context_missing: 'LOG_ERROR'")," to XRay configuration"))))))}m.isMDXComponent=!0}}]);