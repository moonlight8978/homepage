(self.webpackChunkmoonlight_8978_github_io=self.webpackChunkmoonlight_8978_github_io||[]).push([[2016],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return u},kt:function(){return d}});var r=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(a),d=i,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||n;return a?r.createElement(k,l(l({ref:t},u),{},{components:a})):r.createElement(k,l({ref:t},u))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,l=new Array(n);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<n;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6822:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return c}});var r=a(2122),i=a(9756),n=(a(7294),a(3905)),l=["components"],o={title:"IAM",code:"N/A"},s={unversionedId:"aws-developer-associated/iam",id:"aws-developer-associated/iam",isDocsHomePage:!1,title:"IAM",description:"Core",source:"@site/books/aws-developer-associated/iam.md",sourceDirName:"aws-developer-associated",slug:"/aws-developer-associated/iam",permalink:"/books/aws-developer-associated/iam",editUrl:"https://github.com/moonlight8978/moonlight8978.github.io/edit/v2/books/books/aws-developer-associated/iam.md",version:"current",lastUpdatedAt:1624004023,formattedLastUpdatedAt:"6/18/2021",frontMatter:{title:"IAM",code:"N/A"},sidebar:"tutorialSidebar",previous:{title:"AWS EventBridge",permalink:"/books/aws-developer-associated/event-bridge"},next:{title:"AWS Kinesis",permalink:"/books/aws-developer-associated/kinesis"}},p=[{value:"Core",id:"core",children:[]},{value:"Policy",id:"policy",children:[]},{value:"User",id:"user",children:[]},{value:"Role",id:"role",children:[]},{value:"Identity Federation",id:"identity-federation",children:[]},{value:"Security Token Service (STS)",id:"security-token-service-sts",children:[]},{value:"Cross-account roles",id:"cross-account-roles",children:[]},{value:"Audit",id:"audit",children:[]},{value:"Practical notes",id:"practical-notes",children:[]}],u={toc:p};function c(e){var t=e.components,o=(0,i.Z)(e,l);return(0,n.kt)("wrapper",(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"core"},"Core"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"User can be group into Group (not required)"),(0,n.kt)("p",{parentName:"li"},"Groups only contain users, not other groups"),(0,n.kt)("p",{parentName:"li"},"User can belong to multiple groups"),(0,n.kt)("p",{parentName:"li"},"All users in a group share the same permissions, make adding or removing permission easier (except inline policies)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Permission is granted by using policies (JSON document)"),(0,n.kt)("p",{parentName:"li"},"Least privilege principle")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Roles can have many policies attached. Various AWS resources alllow roles to be attached directly to them"))),(0,n.kt)("h2",{id:"policy"},"Policy"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Types",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Managed Policies: Managed by AWS, not editable"),(0,n.kt)("li",{parentName:"ul"},"Customer Managed Policies: Created by customer, editable"),(0,n.kt)("li",{parentName:"ul"},"Inline Policies: Policies which directly attached to user"))),(0,n.kt)("li",{parentName:"ul"},"Structure",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Statement: Array of policies",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Sid: Identifier of statement"),(0,n.kt)("li",{parentName:"ul"},"Effect: Allow/Deny"),(0,n.kt)("li",{parentName:"ul"},"Principal: account, user, role, or federated user to which the policy applied to"),(0,n.kt)("li",{parentName:"ul"},"Action: list of actions to deny/allow"),(0,n.kt)("li",{parentName:"ul"},"Resource: list of resources to which the actions applied to"),(0,n.kt)("li",{parentName:"ul"},"Condition: Condition for this policy is in effect")))))),(0,n.kt)("h2",{id:"user"},"User"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Password policy: to set minimum requirements to user password")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Programmatic access key")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Multi-factor authentication (MFA)"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Cannot be forced to enabled"),(0,n.kt)("li",{parentName:"ul"},"Admin can create policy requiring MFA to access resources"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Temporary Security Credentials"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Like programmatic access keys, except they are temporary")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Useful in scenarios that involve: identity federation, delegation, cross-account access, IAM roles")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Can last from minutes to hours")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Not stored with the user, are generated dynamically and provided to the user when requested")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Basis for roles and identity federation"))))),(0,n.kt)("h2",{id:"role"},"Role"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Based on Temporary Security Credentials"),(0,n.kt)("li",{parentName:"ul"},"Types:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"AWS Service Role: a role that a service assumes to perform actions in AWS account"),(0,n.kt)("li",{parentName:"ul"},"AWS service role for EC2 instance",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Special type of service role for that an application running on EC2 instance"))),(0,n.kt)("li",{parentName:"ul"},"AWS service-linked role",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A unique type of service role that is linked directly to an AWS service."),(0,n.kt)("li",{parentName:"ul"},"Are predefined, and includes all the permissions that the service requires"))))),(0,n.kt)("li",{parentName:"ul"},"Delegation: See ",(0,n.kt)("a",{parentName:"li",href:"#cross-account-roles"},"Cross-account roles")," below")),(0,n.kt)("h2",{id:"identity-federation"},"Identity Federation"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Linking multiple identity management systems"),(0,n.kt)("li",{parentName:"ul"},"Support:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Enterprise: SAML, Custom Federation broker"),(0,n.kt)("li",{parentName:"ul"},"Web identity federation: Amazon, Facebook, Google, OpenID Connect 2.0")))),(0,n.kt)("h2",{id:"security-token-service-sts"},"Security Token Service (STS)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"STS is a web service that enables us to request temporary, limited-privilege credentials for IAM users or federated users")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Global service")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"All requests go to a single endpoint at ",(0,n.kt)("a",{parentName:"p",href:"https://sts.amazonaws.com"},"https://sts.amazonaws.com")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Response include: AccessKeyID, SecretAccessKey, SessionToken, Expiration"),(0,n.kt)("li",{parentName:"ul"},"Some API actions to obtain STS:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"AssumeRole"),(0,n.kt)("li",{parentName:"ul"},"AssumeRoleWithSAML"),(0,n.kt)("li",{parentName:"ul"},"AssumeRoleWithWebIdentity"),(0,n.kt)("li",{parentName:"ul"},"..."))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"AssumeRoleWithWebIdentity"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{src:a(7104).Z})))),(0,n.kt)("h2",{id:"cross-account-roles"},"Cross-account roles"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Grant users from another")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Policy"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "Statement": {\n    "Effect": "Allow",\n    "Action": "sts:AssumeRole",\n    "Resource": "arn:aws:iam::xxx:role/UpdateApp"\n  }\n}\n')))),(0,n.kt)("h2",{id:"audit"},"Audit"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"IAM Credentials Report: List all users, and their status"),(0,n.kt)("li",{parentName:"ul"},"IAM Access Advisor: Show service permissions granted to a user and when those services were last accessed")),(0,n.kt)("h2",{id:"practical-notes"},"Practical notes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Use groups to assign permissions to IAM users"),(0,n.kt)("li",{parentName:"ul"},"Use IAM role instead of private keys")))}c.isMDXComponent=!0},7104:function(e,t,a){"use strict";t.Z=a.p+"assets/images/iam-sts-8729b985c091c5e046fc2e9a2d68a5cd.webp"}}]);