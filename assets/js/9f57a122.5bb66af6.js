(self.webpackChunkmoonlight_8978_github_io=self.webpackChunkmoonlight_8978_github_io||[]).push([[3807],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return a?n.createElement(g,l(l({ref:t},p),{},{components:a})):n.createElement(g,l({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3967:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var n=a(2122),r=a(9756),i=(a(7294),a(3905)),l=["components"],o={},s={unversionedId:"ruby/active-storage",id:"ruby/active-storage",isDocsHomePage:!1,title:"ActiveStorage",description:"Last updated: 2019-03-23",source:"@site/docs/ruby/active-storage.md",sourceDirName:"ruby",slug:"/ruby/active-storage",permalink:"/docs/ruby/active-storage",editUrl:"https://github.com/moonlight8978/moonlight8978.github.io/edit/v2/docs/docs/ruby/active-storage.md",version:"current",lastUpdatedAt:1623035465,formattedLastUpdatedAt:"6/7/2021",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ActionText",permalink:"/docs/ruby/action-text"},next:{title:"Arel",permalink:"/docs/ruby/arel"}},c=[{value:"Setup",id:"setup",children:[]},{value:"Usage",id:"usage",children:[]}],p={toc:c};function u(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Last updated: 2019-03-23")),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"rails active_storage:install"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"rails db:migrate")))),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Storage: (Local/Cloud) AWS for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"# config/storage.yml\namazon:\n  service: S3\n  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>\n  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>\n  region: us-east-1\n  bucket: your_own_bucket\n")),(0,i.kt)("p",null,"Rails save our secret keys in encrypted form in ",(0,i.kt)("inlineCode",{parentName:"p"},"config/credentials.yml.enc"),". It's safe to commit to SVN servers."),(0,i.kt)("p",null,"The file that should not be tracked by Git is ",(0,i.kt)("inlineCode",{parentName:"p"},"config/master.key"),". It contains the autogenerated key that allows to decrypt our credentials."),(0,i.kt)("p",null,"Rails provides tasks to work with credentials:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ EDITOR=vi rails credentials:edit  # Edit keys\n$ rails credentials:show            # List all keys\n")),(0,i.kt)("p",null,"In model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"class Post < ApplicationRecord\n  has_one_attached :cover\n  has_many_attached :images\nend\n")),(0,i.kt)("p",null,"In views:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"= f.file_field :cover, class: 'form-control'\n= f.file_field :images, multiple: true, class: 'form-control'\n")),(0,i.kt)("p",null,"Controller: permit the attachment keys' name"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def post_params\n  params.require(:post).permit(\n    :title, :content, :cover, images: []\n  )\nend\n")),(0,i.kt)("p",null,"Process:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Store attachment data into ",(0,i.kt)("inlineCode",{parentName:"li"},"active_storage_blobs")," table: filename, size, key, checksum..."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"active_storage_attachments")," table works as a join table. Store attachment type, its blob id, and the model id."),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"ActiveJob")," to set the metadata for blobs: width, height")),(0,i.kt)("p",null,"Access from view:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"= image_tag @post.cover.variant(resize: '300x300')\n\n- @post.images.each do |file|\n  - if file.variable?        # if file is image\n    = image_tag file.variant(resize: '300x300', monochrome: true)\n  - elsif file.previewable?  # if file has preview image (PDF...)\n    = image_tag file.preview(resize: \"100x100\")\n  - else\n    = link_to file.filename, rails_blob_path(file, disposition: :attachment)\n")),(0,i.kt)("p",null,"Rails will send a request to ",(0,i.kt)("inlineCode",{parentName:"p"},"ActiveStorage::BlobsController#show")," to resize/retrieve the image.\nRails use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signed_blob_id"),": to retrieve the blob record from database."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key "),": location of the blob on disk."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"variation_key"),": to retrieve the resized version (image only).")),(0,i.kt)("p",null,"Some non-image files can be previewed . Extracting previews requires third-party applications, ",(0,i.kt)("inlineCode",{parentName:"p"},"ffmpeg")," for video and ",(0,i.kt)("inlineCode",{parentName:"p"},"mutool")," for PDFs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"= link_to(@post.cover.filename, rails_blob_path(@post.cover, disposition: :attachment))\n")),(0,i.kt)("p",null,"Disposition is ",(0,i.kt)("inlineCode",{parentName:"p"},":inline")," by default, by changing to ",(0,i.kt)("inlineCode",{parentName:"p"},":attachment")," will result in downloading the attachment."),(0,i.kt)("p",null,"To delete the attachment, use ",(0,i.kt)("inlineCode",{parentName:"p"},"#purge")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"@post.cover.purge\n@post.images.first.purge_later  # background process\n@post.images.purge\n")),(0,i.kt)("p",null,"Use custom validator to validate the attachment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"validate :validate_cover, if: ->(post) { post.cover.attached? }\n\ndef validate_cover\n  unless cover.blob.content_type.start_with?('image')\n    errors.add(:cover, :invalid_type, message: 'Invalid cover')\n  end\n\n  unless cover.blob.byte_size > 10\n    errors.add(:cover, :too_small, message: 'Too small')\n  end\nend\n")),(0,i.kt)("p",null,"Direct uploads"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"= f.file_field :cover, direct_upload: true, class: 'form-control'\n")),(0,i.kt)("p",null,"JS events and more details: ",(0,i.kt)("a",{parentName:"p",href:"http://edgeguides.rubyonrails.org/active_storage_overview.html#direct-upload-javascript-events"},"here")))}u.isMDXComponent=!0}}]);