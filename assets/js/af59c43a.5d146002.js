(self.webpackChunkmoonlight_8978_github_io=self.webpackChunkmoonlight_8978_github_io||[]).push([[4946],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return u},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(a),d=r,g=m["".concat(c,".").concat(d)]||m[d]||p[d]||i;return a?n.createElement(g,o(o({ref:t},u),{},{components:a})):n.createElement(g,o({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4435:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var n=a(2122),r=a(9756),i=(a(7294),a(3905)),o=["components"],l={title:"Auto Scaling Group",code:"N/A"},c={unversionedId:"aws-developer-associated/auto-scaling-group",id:"aws-developer-associated/auto-scaling-group",isDocsHomePage:!1,title:"Auto Scaling Group",description:"* Collection of EC2 instances that are treated as group for the purposes of automatic scaling & management",source:"@site/books/aws-developer-associated/auto-scaling-group.md",sourceDirName:"aws-developer-associated",slug:"/aws-developer-associated/auto-scaling-group",permalink:"/books/aws-developer-associated/auto-scaling-group",editUrl:"https://github.com/moonlight8978/moonlight8978.github.io/edit/v2/books/books/aws-developer-associated/auto-scaling-group.md",version:"current",lastUpdatedAt:1623052541,formattedLastUpdatedAt:"6/7/2021",frontMatter:{title:"Auto Scaling Group",code:"N/A"},sidebar:"tutorialSidebar",previous:{title:"AWS API Gateway",permalink:"/books/aws-developer-associated/api-gateway"},next:{title:"CI/CD",permalink:"/books/aws-developer-associated/ci-cd"}},s=[],u={toc:s};function p(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Collection of EC2 instances that are treated as group for the purposes of automatic scaling & management")),(0,i.kt)("h4",{id:"capacity-settings"},"Capacity settings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Min/Max/Desired Capacity"),(0,i.kt)("li",{parentName:"ul"},"Availability zone: >= 1")),(0,i.kt)("h4",{id:"health-check-replacements"},"Health Check Replacements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ASG will perform health check on EC2 instances. ASG will terminate unhealthy one and launch new instance to keep desired capacity match."),(0,i.kt)("li",{parentName:"ul"},"2 types of check",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"EC2 health check: If the instance status is one of ",(0,i.kt)("inlineCode",{parentName:"li"},"stopping"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"stopped"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"shutting-down"),", or ",(0,i.kt)("inlineCode",{parentName:"li"},"terminated"),", it will be considered as unhealthy"),(0,i.kt)("li",{parentName:"ul"},"ELB check: Use attached load balancer to perform health check on ",(0,i.kt)("inlineCode",{parentName:"li"},"running")," instances")))),(0,i.kt)("h4",{id:"scaling-policies"},"Scaling Policies"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Scale In (Remove instances) / Scale Out (Add more instances)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Target Tracking Scaling Policy:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Maintains a specific metric at a target value ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ALB Request Count per target, Average CPU, Average network In/Out"),(0,i.kt)("li",{parentName:"ul"},"eg. If average CPU exceeds 75% then add another server"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Simple Scaling Policy (legacy, in favour of Step Scaling): scale when alarm (Cloudwatch alarm) is breached")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Step Scaling: scale when an alarm is breached, can escalates based on alarm value changing"))),(0,i.kt)("h4",{id:"elb-integration"},"ELB Integration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Classic Load Balancers are associated directly to ASG"),(0,i.kt)("li",{parentName:"ul"},"Application and Network Load Balancers are associated indirectly via their Target Groups")),(0,i.kt)("h4",{id:"launch-configuration"},"Launch Configuration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Template for ASG to launch an instance",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"EC2 settings (storage, instance type, role, ...)"))),(0,i.kt)("li",{parentName:"ul"},"Launch Templates are Launch Configurations with Versioning")))}p.isMDXComponent=!0}}]);