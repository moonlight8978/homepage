(self.webpackChunkmoonlight_8978_github_io=self.webpackChunkmoonlight_8978_github_io||[]).push([[9768],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,k=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return n?r.createElement(k,o(o({ref:t},c),{},{components:n})):r.createElement(k,o({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3153:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o=["components"],l={},s={unversionedId:"ruby/enumerator-and-large-response-streaming",id:"ruby/enumerator-and-large-response-streaming",isDocsHomePage:!1,title:"Enumerator and Large Response Streaming",description:"Last updated: 2021-06-04",source:"@site/docs/ruby/enumerator-and-large-response-streaming.md",sourceDirName:"ruby",slug:"/ruby/enumerator-and-large-response-streaming",permalink:"/docs/ruby/enumerator-and-large-response-streaming",editUrl:"https://github.com/moonlight8978/moonlight8978.github.io/edit/v2/docs/docs/ruby/enumerator-and-large-response-streaming.md",version:"current",lastUpdatedAt:1623035465,formattedLastUpdatedAt:"6/7/2021",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Arel",permalink:"/docs/ruby/arel"}},p=[{value:"Enumerator",id:"enumerator",children:[{value:"Plain Old Ruby Objects (POROs)",id:"plain-old-ruby-objects-poros",children:[]}]},{value:"Stream large response in Rails",id:"stream-large-response-in-rails",children:[{value:"Streaming",id:"streaming",children:[]},{value:"ActionController::Live",id:"actioncontrollerlive",children:[]},{value:"ActionController::Metal#response_body=",id:"actioncontrollermetalresponse_body",children:[]}]}],c={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Last updated: 2021-06-04")),(0,i.kt)("h2",{id:"enumerator"},"Enumerator"),(0,i.kt)("h3",{id:"plain-old-ruby-objects-poros"},"Plain Old Ruby Objects (POROs)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Create an enumerator with block will returns an ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumerator")," instance with an ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumerator::Generator")," instance as data source."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Enumerator::Generator")," can be paused after ",(0,i.kt)("inlineCode",{parentName:"li"},"yielder")," get called (generate data lazily)")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'enumerator = Enumerator.new do |yielder|\n    5.times do |i|\n    puts "i = #{i}"\n    yielder << i\n    end\nend\n=> #<Enumerator: #<Enumerator::Generator:0x00007fe6b18839d0>:each>\n\nenumerator.each do |e|\n  puts "e = #{e}"\nend\n# => i = 0\n#    e = 0\n#    i = 1\n#    e = 1\n#    i = 2\n#    e = 2\n#    i = 3\n#    e = 3\n#    i = 4\n#    e = 4\n')),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Enumerator")," datasource is respond to Enumerable method?")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"[1, 2].map    => #<Enumerator: [1, 2]:map>\n[1, 2].select => #<Enumerator: [1, 2]:select>\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Custom Enumerator"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'class SampleIterator\n  def brrr(&block)\n    puts "1, 2"\n    yield(1)\n    return 5\n  end\nend\n\nenumerator = SampleIterator.new.enum_for(:brrr)\n# => #<Enumerator: #<SampleIterator:0x00007f2866d45bd0>:brrr>\n\nb = enumerator.each do |e|\n  puts "e = #{e}"\nend\n\nputs "b = #{b}"\n\n# => 1, 2\n#    e = 1\n#    b = 5\n')))),(0,i.kt)("h2",{id:"stream-large-response-in-rails"},"Stream large response in Rails"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Streaming: ",(0,i.kt)("a",{parentName:"li",href:"https://api.rubyonrails.org/classes/ActionController/Streaming.html"},"https://api.rubyonrails.org/classes/ActionController/Streaming.html")),(0,i.kt)("li",{parentName:"ul"},"Live: ",(0,i.kt)("a",{parentName:"li",href:"https://api.rubyonrails.org/classes/ActionController/Live.html"},"https://api.rubyonrails.org/classes/ActionController/Live.html"))),(0,i.kt)("h3",{id:"streaming"},"Streaming"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Usage"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'class PostsController\n  def index\n    response.headers["Last-Modified"] = Time.current.httpdate\n    render stream: true\n  end\nend\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"By default:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Rails render template first, and then the layout."),(0,i.kt)("li",{parentName:"ul"},"The response is sent to the client after the whole template is rendered, all queries are made, and the layout is processed."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Streaming")," reverts the rendering flow"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Render template first"),(0,i.kt)("li",{parentName:"ul"},"Stream each part of the layout as they are processed"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When request"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Server will returns the layout first (the header in most time), with response headers, ..."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-html"},'curl -i localhost:3000 HTTP/1.1 200 OK X-Frame-Options: SAMEORIGIN\nX-XSS-Protection: 1; mode=block X-Content-Type-Options: nosniff\nX-Download-Options: noopen X-Permitted-Cross-Domain-Policies: none\nReferrer-Policy: strict-origin-when-cross-origin Last-Modified: Mon, 08 Mar\n2021 08:27:00 GMT Cache-Control: no-cache Transfer-Encoding: chunked Vary:\nAccept Content-Type: text/html; charset=utf-8 X-Request-Id:\n333db74f-4c19-49a3-a141-1780b7205b32 X-Runtime: 0.003117\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>App</title>\n    <meta name="viewport" content="width=device-width,initial-scale=1" />\n  </head>\n  <body></body>\n</html>\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Response body will be streamed later after the template is ready"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-html"},"        <span>1</span>\n  0\n  <span>2</span>\n  0\n  <span>3</span>\n  0\n  </body>\n</html>\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If error occurred, server will return a script to redirect to 500 template"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<script>\n  window.location = /500.html\n<\/script>\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Notes:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Instance variable won't work inside the layout. Use ",(0,i.kt)("inlineCode",{parentName:"li"},"content_for"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"provide"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"yield")," instead"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provide")," is called once for each part, ",(0,i.kt)("inlineCode",{parentName:"li"},"content_for")," is called multiple times, and are concatenated"),(0,i.kt)("li",{parentName:"ul"},"Apply to template only, XML, JSON won't work"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Use case"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Render large data table")))),(0,i.kt)("h3",{id:"actioncontrollerlive"},"ActionController::Live"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Usage"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'class LivesController < ApplicationController\n  include ActionController::Live\n\n  def show\n    disposition = ActionDispatch::Http::ContentDisposition.format(disposition: "attachment", filename: "live.csv")\n    response.headers["Content-Disposition"] = disposition\n    response.headers["Content-Type"] = "text/csv"\n    response.headers["Last-Modified"] = Time.current.httpdate\n    100.times {\n      response.stream.write CSV.generate_line(["1", "title", "content"])\n      sleep 0.05\n    }\n  ensure\n    response.stream.close\n  end\nend\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Note"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Stream must be close after processed, otherwise the socket will leave open"),(0,i.kt)("li",{parentName:"ul"},"The response headers will not available until the stream is over"),(0,i.kt)("li",{parentName:"ul"},"Need HTTP 1.1 or higher"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Request"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"HTTP/1.1 200 OK\nServer: nginx/1.19.7\nDate: Mon, 08 Mar 2021 08:54:11 GMT\nContent-Type: text/csv\nTransfer-Encoding: chunked\nConnection: keep-alive\nContent-Disposition: attachment; filename=\"live.csv\"; filename*=UTF-8''live.csv\nLast-Modified: Mon, 08 Mar 2021 08:54:11 GMT\nCache-Control: no-store, must-revalidate, private, max-age=0\nX-Request-Id: 1649bd8c-a17f-4413-9406-469aa0a75e9d\nX-Runtime: 0.004780\nX-MiniProfiler-Original-Cache-Control: no-cache\nX-MiniProfiler-Ids: 9dfl9qzc7op6ckrts566,su3q84fa2xlystr0tz7s,2eqh0hmva589dxr9zzy4,7wbhxgbcz4oel99bm67x,vtiyjx7ucywbv85q8jss\nSet-Cookie: __profilin=p%3Dt; path=/; HttpOnly; SameSite=Lax\n\n1,title,content\n1,title,content\n1,title,content\n1,title,content\n1,title,content\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The body is concatenated overtime")))),(0,i.kt)("h3",{id:"actioncontrollermetalresponse_body"},"ActionController::Metal#response_body="),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ActionController::Metal#response_body=")," accept a ",(0,i.kt)("inlineCode",{parentName:"li"},"Enumerator")," as parameter. So it will lazily generate the needed data, then stream to user client.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Usage"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'respond_to do |format|\n  format.csv do\n    disposition = ActionDispatch::Http::ContentDisposition.format(disposition: "attachment", filename: "chunked.csv")\n\n    response.headers["Content-Disposition"] = disposition\n    response.headers["Content-Type"] = "text/csv"\n    # Tell Rack to stream the content\n    response.headers.delete("Content-Length")\n    # Don\'t cache anything from this generated endpoint\n    response.headers["Cache-Control"] = "no-cache"\n    # this is a hack to preven middleware from buffering\n    response.headers["Last-Modified"] = Time.current.httpdate\n    # Don\'t buffer when going through proxy servers\n    response.headers["X-Accel-Buffering"] = "no"\n\n    self.response_body = Enumerator.new do |yielder|\n      100.times do\n        yielder << CSV.generate_line(["1", "title", "content"])\n        sleep 0.05\n      end\n    end\n  end\nend\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Does not require anything special")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Request"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"curl -i localhost/chunk                                                                                                                                            [6804b94]\nHTTP/1.1 200 OK\nServer: nginx/1.19.7\nDate: Mon, 08 Mar 2021 08:56:24 GMT\nContent-Type: text/csv\nTransfer-Encoding: chunked\nConnection: keep-alive\nX-Frame-Options: SAMEORIGIN\nX-XSS-Protection: 1; mode=block\nX-Content-Type-Options: nosniff\nX-Download-Options: noopen\nX-Permitted-Cross-Domain-Policies: none\nReferrer-Policy: strict-origin-when-cross-origin\nContent-Disposition: attachment; filename=\"chunked.csv\"; filename*=UTF-8''chunked.csv\nCache-Control: no-store, must-revalidate, private, max-age=0\nLast-Modified: Mon, 08 Mar 2021 08:56:24 GMT\nX-Request-Id: 110883ba-f7d6-47d6-b8f8-d43080362386\nX-Runtime: 0.017299\nX-MiniProfiler-Original-Cache-Control: no-cache\nX-MiniProfiler-Ids: 4909w92x1300zeq1kjfw,su3q84fa2xlystr0tz7s,2eqh0hmva589dxr9zzy4,7wbhxgbcz4oel99bm67x,vtiyjx7ucywbv85q8jss,9dfl9qzc7op6ckrts566\nSet-Cookie: __profilin=p%3Dt; path=/; HttpOnly; SameSite=Lax\n\n1,title,content\n1,title,content\n1,title,content\n1,title,content\n1,title,content\n1,title,content\n1,title,content\n1,title,content\n1,title,content\n1,title,content\n1,title,content\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The body is concatenated overtime")))),(0,i.kt)("h4",{id:"note"},"Note"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Rails using Rack, which has the following code"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# https://github.com/rack/rack/blob/138cba2f49d5c18e91b3dc377a83b9ce1fb70094/lib/rack/etag.rb#L30\ndef call\n  if etag_status?(status) && etag_body?(body) && !skip_caching?(headers)\n    original_body = body\n    digest, new_body = digest_body(body)\n    # ...\n    end\nend\n\ndef skip_caching?(headers)\n  headers.key?(ETAG_STRING) || headers.key?('Last-Modified')\nend\n")),(0,i.kt)("p",{parentName:"li"},"Even we use Enumerable, the body is still preprocessed to generate the ETag. So, when stream response, we must add ",(0,i.kt)("inlineCode",{parentName:"p"},"Last-Modified")," header"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'response.headers["Last-Modified"] = Time.current.httpdate\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Nginx will buffer the response (wait until the response is completed), set ",(0,i.kt)("inlineCode",{parentName:"p"},"X-Accel-Buffering")," header to ",(0,i.kt)("inlineCode",{parentName:"p"},"no")," to disable it"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'response.headers["X-Accel-Buffering"] = "no"\n')))),(0,i.kt)("h4",{id:"other-format"},"Other format"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"JSON")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'self.response_body = Enumerator.new do |yielder|\n  yielder << "["\n  100.times do |index|\n    yielder << "," unless index == 0\n    yielder << { title: "title", content: "content" }.to_json\n    sleep 0.05\n  end\n  yielder << "]"\nend\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ZIP",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/WeTransfer/zip_tricks"},(0,i.kt)("inlineCode",{parentName:"a"},"zip_tricks")))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'include ZipTricks::RailsStreaming\n\nzip_tricks_stream do |zip|\n  zip.write_deflated_file("users.csv") do |sink|\n    CSV(sink) do |csv_write|\n      csv_write << User.column_names\n      User.all.find_each do |user|\n        csv_write << user.attributes.values\n      end\n    end\n  end\n  \n  zip.write_deflated_file("posts.csv") do |sink|\n    # ...\n  end\nend\n')))}d.isMDXComponent=!0}}]);