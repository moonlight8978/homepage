(self.webpackChunkmoonlight_8978_github_io=self.webpackChunkmoonlight_8978_github_io||[]).push([[8911],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return s},kt:function(){return k}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=m(a),k=l,d=c["".concat(p,".").concat(k)]||c[k]||u[k]||i;return a?n.createElement(d,r(r({ref:t},s),{},{components:a})):n.createElement(d,r({ref:t},s))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var m=2;m<i;m++)r[m]=a[m];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},9894:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return m},default:function(){return u}});var n=a(2122),l=a(9756),i=(a(7294),a(3905)),r=["components"],o={},p={unversionedId:"database/high-performance-mysql",id:"database/high-performance-mysql",isDocsHomePage:!1,title:"High Performance MySQL",description:"Architecture",source:"@site/books/database/high-performance-mysql.md",sourceDirName:"database",slug:"/database/high-performance-mysql",permalink:"/books/database/high-performance-mysql",editUrl:"https://github.com/moonlight8978/moonlight8978.github.io/edit/v2/books/books/database/high-performance-mysql.md",version:"current",lastUpdatedAt:1622714660,formattedLastUpdatedAt:"6/3/2021",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AWS X-Ray",permalink:"/books/aws-developer-associated/x-ray"},next:{title:"ECMA",permalink:"/books/javascript/ecma"}},m=[{value:"Architecture",id:"architecture",children:[]},{value:"Concurrency control",id:"concurrency-control",children:[{value:"Locking",id:"locking",children:[]}]},{value:"Transactions",id:"transactions",children:[{value:"Isolation levels",id:"isolation-levels",children:[]},{value:"Deadlocks",id:"deadlocks",children:[]},{value:"Transaction logging",id:"transaction-logging",children:[]},{value:"AUTOCOMMIT",id:"autocommit",children:[]},{value:"Multiversion Concurrency Control - MVCC",id:"multiversion-concurrency-control---mvcc",children:[]},{value:"InnoDB",id:"innodb",children:[]}]},{value:"Optimizing Schema and Data Types",id:"optimizing-schema-and-data-types",children:[{value:"Choosing optimal data types",id:"choosing-optimal-data-types",children:[]},{value:"Choosing identifiers",id:"choosing-identifiers",children:[]},{value:"BEWARE OF AUTOGENERATED SCHEMAS",id:"beware-of-autogenerated-schemas",children:[]},{value:"Special data types",id:"special-data-types",children:[]},{value:"Schema Design Gotchas",id:"schema-design-gotchas",children:[]},{value:"Normalization and Denormalization",id:"normalization-and-denormalization",children:[]},{value:"Cache and Summary Tables",id:"cache-and-summary-tables",children:[]},{value:"Counter Tables",id:"counter-tables",children:[]},{value:"Indexing",id:"indexing",children:[]}]}],s={toc:m};function u(e){var t=e.components,o=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"architecture"},"Architecture"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Docusaurus",src:a(6579).Z})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"First layer: Thread, connection, authentication, ... (nh\u1eefng component basic cho m\u1ecdi \u1ee9ng d\u1ee5ng client/server)"),(0,i.kt)("li",{parentName:"ul"},"Second layer: Logic h\u1ea1i n\xe3o c\u1ee7a MySQL t\u1eadp trung t\u1ea1i \u0111\xe2y: query parsing, analysis, optimization, caching, ..."),(0,i.kt)("li",{parentName:"ul"},"Third layer: Storage engine, server layer communicate v\u1edbi layer n\xe0y th\xf4ng qua storage engine API.")),(0,i.kt)("h2",{id:"concurrency-control"},"Concurrency control"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"MySQL handle \u1edf 2 level: the server level, v\xe0 storage engine level.")),(0,i.kt)("h3",{id:"locking"},"Locking"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Implement locking system to deal with concurrent read/write access",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Read locks"),(0,i.kt)("li",{parentName:"ul"},"Write locks"))),(0,i.kt)("li",{parentName:"ul"},"Table locks:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Lowest overhead"),(0,i.kt)("li",{parentName:"ul"},"Lock the entire table."),(0,i.kt)("li",{parentName:"ul"},"Write to a table (insert, delete, update, ...) \u2192 acquires a write lock \u2192 nobody is writing \u2192 readers can obtain read locks, which don't conflict with other read locks"),(0,i.kt)("li",{parentName:"ul"},"Write locks has higher priority than read locks"),(0,i.kt)("li",{parentName:"ul"},"Although storage engines can manage their own locks, MySQL also use a variety of locks that are effecient. (e.g. the server use a table-level lock for ",(0,i.kt)("inlineCode",{parentName:"li"},"ALTER TABLE"),", regardless of the storage engine)"))),(0,i.kt)("li",{parentName:"ul"},"Row locks",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Offers the greatest concurrency, but also carries the greatest overhead."),(0,i.kt)("li",{parentName:"ul"},"Are implemented in the storage engine, not the server")))),(0,i.kt)("h4",{id:"implicit-locking"},"Implicit locking"),(0,i.kt)("p",null,"InnoDB uses a two-phase locking protocol"),(0,i.kt)("p",null,"Locks can be acquired at any time during a transaction, but it does not release them until a ",(0,i.kt)("inlineCode",{parentName:"p"},"COMMIT")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ROLLBACK"),"."),(0,i.kt)("p",null,"All locks are released at the same time"),(0,i.kt)("h4",{id:"explicitly-locking"},"Explicitly locking"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SELECT ... LOCK IN SHARE MODE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SELECT ... FOR UPDATE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"LOCK TABLES"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"UNLOCK TABLES")," - implemented in the server, not in the storage engines")),(0,i.kt)("h2",{id:"transactions"},"Transactions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"ACID:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Atomicity: a tx must function as a single indivisible unit of work \u2192 either applied or rolled back \u2192 all or nothing"),(0,i.kt)("li",{parentName:"ul"},"Consistency: always move from one consitent state to the next. If the tx is never committed (crash, etc...), none of the tx's changes are ever reflected in the db"),(0,i.kt)("li",{parentName:"ul"},"Isolation: the results of a tx are usually invisible to other txs until the tx is complete."),(0,i.kt)("li",{parentName:"ul"},"Durability"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Downside: db server has to do more work"),(0,i.kt)("p",{parentName:"li"},"\u2192 consider transaction is needed or not"),(0,i.kt)("p",{parentName:"li"},"\u2192 no tx = better performance (use ",(0,i.kt)("inlineCode",{parentName:"p"},"LOCK TABLES")," instead)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Transactions are implemented by the underlying storage engines"),(0,i.kt)("p",{parentName:"li"},"\u2192 Cannot reiably mix different engines within tx"),(0,i.kt)("p",{parentName:"li"},"If transactional and non-transactional tables are mixed in a tx, and a rollback is required, the changes to the non-transactional table cannot be undone"),(0,i.kt)("p",{parentName:"li"},"\u2192 MySQL usually warn or raise error when transactional operations are executed on a nontransactional table."))),(0,i.kt)("h3",{id:"isolation-levels"},"Isolation levels"),(0,i.kt)("p",null,"4 levels, the lower the level, the higher in concurrency & overhead"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"READ UNCOMMITTED")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Txs can view the results of uncommitted txs \u2192 many problems can occur"),(0,i.kt)("li",{parentName:"ul"},"Performance isn't much better than the other levels"),(0,i.kt)("li",{parentName:"ul"},"Dirty read"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"READ COMMITTED")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Most db default isolation level. But not MySQL"),(0,i.kt)("li",{parentName:"ul"},"Tx will see only thoes changes made by committed txs"),(0,i.kt)("li",{parentName:"ul"},"Problem: ",(0,i.kt)("em",{parentName:"li"},"nonrepeatable read")," - the same statement can returns different data"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"REPEATABLE READ")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"solve nonrepeatable read problem: it guarantees that any rows a tx reads will look the same in subsequent reads within the same tx"),(0,i.kt)("li",{parentName:"ul"},"allows another tricky problem: ",(0,i.kt)("em",{parentName:"li"},"phantom reads"),' - select a range of rows, another tx inserts a new row to the range, then select the same range again \u2192 see that "phantom" row'),(0,i.kt)("li",{parentName:"ul"},"InnoDB, XtraDB solve phantom read problem with multi\x10version concurrent control"),(0,i.kt)("li",{parentName:"ul"},"Default MySQL's isolation level"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"SERIALIZABLE")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"highest level of isolation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"tx must be ordered so they can't possibly conflict (in a nutshell, it places a lock on every row it reads)"),(0,i.kt)("p",{parentName:"li"},"\u2192 a lot of timeout, lock contention"))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mysql"},"SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED\n")),(0,i.kt)("h3",{id:"deadlocks"},"Deadlocks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Two or more tx request locks on each other, create a cycle of depencencies"),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Timestamp"),(0,i.kt)("th",{parentName:"tr",align:null},"Tx 1"),(0,i.kt)("th",{parentName:"tr",align:null},"Tx 2"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"BEGIN TRANSACTION")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"UPDATE users SET age = 22 WHERE id = 2")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"BEGIN TRANSACTION"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"done"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"UPDATE users SET age = 23 WHERE id = 3"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"UPDATE users SET age = 23 WHERE id = 3"),(0,i.kt)("br",null),"\u2192 Record has been locked in tx 2",(0,i.kt)("br",null),"\u2192 Wait for tx 2 to complete"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"6"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"done")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"7"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"UPDATE users SET age = 22 WHERE id = 2"),(0,i.kt)("br",null),"\u2192 Record has been locked in tx 1",(0,i.kt)("br",null),"\u2192 Wait for tx 1 to complete"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To combat this problem, db systems implements deadlock detection and timeouts."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"InnoDB will notice circular dependencies and return an error instantly"),(0,i.kt)("li",{parentName:"ul"},"Others will give up after a specific timeout, which is not always good."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Cannot be resolved without rolling back one of the txs"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"InnoDB rolls back the transaction that has the fewest exclusive row locks"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Applications should designed to handle deadlocks"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Many apps simply retry the transaction from the beginning")))),(0,i.kt)("h3",{id:"transaction-logging"},"Transaction logging"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Instead of updating table on disk, the storage engine write a record of change to the transaction log (which on disk too) \u2192 very fast"),(0,i.kt)("p",{parentName:"li"},"At some later time, a process can update the table on disk"),(0,i.kt)("p",{parentName:"li"},"Most storage engine use this technique"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If server crashes before changes to data are made, the storage engine can still recover the changes upon restart"),(0,i.kt)("p",{parentName:"li"},"The recovery method varies between storage engine"))),(0,i.kt)("h3",{id:"autocommit"},"AUTOCOMMIT"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"MySQL's default operation mode")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Unless a tx is explicitly began, it automatically executes each query in a separate transaction."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-mysql"},"SHOW VARIABLES LIKE 'AUTOCOMMIT';\n# => ON / OFF\n\nSET AUTOCOMMIT = 1;\n# 1: ON, 0: OFF\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"AUTOCOMMIT=0")," \u2192 always in a transaction, until a ",(0,i.kt)("inlineCode",{parentName:"p"},"COMMIT")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ROLLBACK")," is issued. MySQL then starts a new transaction immediately.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Changing ",(0,i.kt)("inlineCode",{parentName:"p"},"AUTOCOMMIT")," has no effect on nontransactional tables, such as MyISAM or Memory tables (have no notion of committing or rolling back)"))),(0,i.kt)("h3",{id:"multiversion-concurrency-control---mvcc"},"Multiversion Concurrency Control - MVCC"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Most of MySQL storage engine use row-level locking in conjunction with a technique for increasing concurrency, known as MVCC.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"MVCC is not unique to MySQL")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"How MVCC works: Keep a snapshot of the data at some point in time"),(0,i.kt)("p",{parentName:"li"},"\u2192 transactions can see a consistent view of the data")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"M\u1ed7i storage engine c\xf3 c\xe1ch implement MVCC kh\xe1c nihau")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"InnoDB: l\u01b0u th\xeam 2 b\u1ea3n n\u1eefa v\u1edbi m\u1ed7i record (hidden values), 1 \u0111\u01b0\u1ee3c ghi l\u1ea1i l\xfac create, v\xe0 1 ghi l\u1ea1i l\xfac expire (ho\u1eb7c delete)."),(0,i.kt)("p",{parentName:"li"},"Kh\xf4ng l\u01b0u timestamp c\u1ee7a nh\u1eefng event tr\xean (create/expire/delete), m\xe0 s\u1ebd l\u01b0u system version number khi m\u1ed7i event \u0111\xf3 x\u1ea3y ra - gi\xe1 tr\u1ecb n\xe0y \u0111\u01b0\u1ee3c t\u0103ng m\u1ed7i khi b\u1eaft \u0111\u1ea7u transaction"),(0,i.kt)("p",{parentName:"li"},"\u2192 Each transaction keeps its own record of the current system version, as the time it began."),(0,i.kt)("p",{parentName:"li"},"\u2192 M\u1ed7i query c\u1ea7n check version number c\u1ee7a m\u1ed7i row"),(0,i.kt)("p",{parentName:"li"},"VD:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SELECT"),": t\xecm row version at least as old as the transaction (<= transaction version - \u0111\u1ea3m b\u1ea3o data kh\xf4ng b\u1ecb outdate). \u0111\u1ea3m b\u1ea3o deletion version undefined, ho\u1eb7c l\u1edbn h\u01a1n version c\u1ee7a transaction (\u0111\u1ec3 \u0111\u1ea3m b\u1ea3o data ch\u01b0a b\u1ecb xo\xe1)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"INSERT"),": records system version number hi\u1ec7n t\u1ea1i v\u1edbi row m\u1edbi v\u1eeba t\u1ea1o"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DELETE"),": records system version number as the row's deletion ID"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UPDATE"),": write new copy of the row, using the system version number for the new row's version. also write the system version number as the old row's deletion version"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"MVVC gi\xfap cho ph\u1ea7n l\u1edbn read query kh\xf4ng c\u1ea7n lock.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Drawback:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"T\u1ed1n th\xeam b\u1ed9 nh\u1edb"),(0,i.kt)("li",{parentName:"ul"},"Ph\u1ea3i handle th\xeam m\u1ed9t s\u1ed1 operation kh\xe1c."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Ch\u1ec9 ho\u1ea1t \u0111\u1ed9ng tr\xean ",(0,i.kt)("inlineCode",{parentName:"p"},"REPEATABLE READ")," v\xe0 ",(0,i.kt)("inlineCode",{parentName:"p"},"READ COMMITTED"),"."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"READ UNCOMMITTED"),": lu\xf4n \u0111\u1ecdc version m\u1edbi nh\u1ea5t \u2192 uncompatible"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SERIALIZABLE"),": read query lu\xf4n lock m\u1ecdi row \u2192 uncompatible")))),(0,i.kt)("h3",{id:"innodb"},"InnoDB"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"store d\u1eef li\u1ec7u theo series c\u1ee7a 1 ho\u1eb7c nhi\u1ec1u file, v\xe0o tablespace")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"s\u1eed d\u1ee5ng MVVC \u0111\u1ec3 c\xf3 high concurrency")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"support c\u1ea3 4 isolation level, default l\xe0 ",(0,i.kt)("inlineCode",{parentName:"p"},"REPEATABLE READ"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"s\u1eed d\u1ee5ng next-key locking \u0111\u1ec3 ng\u0103n ch\u1eb7n phantom read"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ngo\xe0i vi\u1ec7c lock row th\xec InnoDB lock th\xeam c\u1ea3 index, \u0111\u1ec3 ng\u0103n phantom kh\xf4ng insert \u0111\u01b0\u1ee3c v\xe0o."),(0,i.kt)("li",{parentName:"ul"},"Table \u0111\u01b0\u1ee3c build tr\xean clustered index (index structure r\u1ea5t kh\xe1c so v\u1edbi c\xe1c engine kh\xe1c)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Thay \u0111\u1ed5i engine"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-mysql"},"ALTER TABLE mytable ENGINE = InnoDB;\n")),(0,i.kt)("p",{parentName:"li"},"C\xe1ch tr\xean kh\xf4ng t\u1ed1i \u01b0u, do server c\xf3 th\u1ec3 \u0103n h\u1ebft resource (disk I/O, cpu)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-mysql"},"CREATE TABLE innodb_table LIKE myisam_table;\n\nALTER TABLE innodb_table ENGINE=InnoDB;\n\nSTART TRANSACTION;\nINSERT INTO innodb_table SELECT * FROM myisam_table WHERE id BETWEEN x AND y;\nCOMMIT;\n")),(0,i.kt)("p",{parentName:"li"},"X\u1eed l\xfd theo batch n\u1ebfu data l\u1edbn"))))),(0,i.kt)("h2",{id:"optimizing-schema-and-data-types"},"Optimizing Schema and Data Types"),(0,i.kt)("h3",{id:"choosing-optimal-data-types"},"Choosing optimal data types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Smaller is usually better: Use the smallest data type. But never underestimate the range of values we need.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Simple is good")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Avoid ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," if possible:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"It's harder for MySQL to optimize queries that refer to nullable columns.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," make indexes, index statistics, value comparisons more complicated.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"More storage space to store, and requies special processing inside MySQL")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"But performance improvement is usually small. But for index columns, avoid making them nullable if possible")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Real numbers"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"FLOAT"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"DOUBLE"),": floating-point math. CPU native \u2192 faster"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"4 bytes/8 bytes"),(0,i.kt)("li",{parentName:"ul"},"MySQL s\u1eed d\u1ee5ng ",(0,i.kt)("inlineCode",{parentName:"li"},"DOUBLE")," trong t\xednh to\xe1n n\u1ed9i b\u1ed9 li\xean quan t\u1edbi floating-point type"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"DECIMAL"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"supports exact math."),(0,i.kt)("li",{parentName:"ul"},"CPU don't support the computations directly \u2192 ch\u1eadm \u2192 ch\u1ec9 s\u1eed d\u1ee5ng khi c\u1ea7n \u0111\u1ed9 ch\xednh x\xe1c cao (financial)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Cho ph\xe9p ch\u1ec9 \u0111\u1ecbnh \u0111\u1ed9 ch\xednh x\xe1c"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"DECIMAL"),": s\u1ed1 digit tr\u01b0\u1edbc v\xe0 sau decimal point (up to 65 digits)"),(0,i.kt)("p",{parentName:"li"},"\u2192 \u1ea3nh h\u01b0\u1edfng t\u1edbi space l\u01b0u tr\u1eef")))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"String"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"variable-length \u2192 less storage required"),(0,i.kt)("li",{parentName:"ul"},"use 1 or 2 extra bytes to record the value's length: 1 byte if the column max length is 255 bytes or less, and 2 bytes if it's more"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CHAR"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Fixed-length"),(0,i.kt)("li",{parentName:"ul"},"Trailing spaces will be stripped"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Blob, text"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TEXT")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"SMALLTEXT")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BLOB")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"SMALLBLOB")),(0,i.kt)("li",{parentName:"ul"},'Often store in "external" storage area. Only requires 1-4 bytes of storage space in the row and enough space in external storage to actually hold the value'),(0,i.kt)("li",{parentName:"ul"},"Sorting: sorts only the first ",(0,i.kt)("inlineCode",{parentName:"li"},"max_sort_length")," bytes of the column"),(0,i.kt)("li",{parentName:"ul"},"Cannot index the full length, and cannot use the indexes for sorting"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Enum"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE enum_test(e ENUM('fish', 'apple', 'dog') NOT NULL);\nINSERT INTO enum_test(e) VALUES('fish'), ('dog'), ('apple');\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Actually is integers"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT e + 0 FROM enum_test;\n# +-------+\n# | e + 0 |\n# +-------+\n# |     1 |\n# |     3 |\n# |     2 |\n# +-------+\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Sort by integer values"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT e FROM enum_test ORDER BY e;\n# +-------+\n# | e     |\n# +-------+\n# | fish  |\n# | apple |\n# | dog   |\n# +-------+\n")),(0,i.kt)("p",{parentName:"li"},"Workaround by using ",(0,i.kt)("inlineCode",{parentName:"p"},"FIELD()"),". But this prevents MySQL from using the index for sorting"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT e FROM enum_test ORDER BY FIELD(e, 'apple', 'dog', 'fish');\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Date, Time"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DATETIME"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"large range value (year 1001 - 9999), precision of 1s"),(0,i.kt)("li",{parentName:"ul"},"Store in YYYYMMDDHH-MMSS format - 8 bytes"),(0,i.kt)("li",{parentName:"ul"},"Display in asortable, unambiguous format such as 2008-01-16 22:37:08"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TIMESTAMP"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"L\u01b0u th\u1eddi gian t\xednh t\u1eeb 1970-01-01 00:00 GMT t\u1edbi 2038 - Unix timestamp"),(0,i.kt)("li",{parentName:"ul"},"4 bytes"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NOT NULL")," by default"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Bit-Packed"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"BIT"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"SET"),": many true/false value \u2192 combine into one ",(0,i.kt)("inlineCode",{parentName:"p"},"SET")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-mysql"},"CREATE TABLE acl (perms SET('CAN_READ', 'CAN_WRITE', 'CAN_DELETE') NOT NULL);\n")))))),(0,i.kt)("h3",{id:"choosing-identifiers"},"Choosing identifiers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Integer types: usually best choice"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"fast"),(0,i.kt)("li",{parentName:"ul"},"works with ",(0,i.kt)("inlineCode",{parentName:"li"},"AUTO_INCREMENT")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"String: Avoid if possible."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"take up a lot of space"),(0,i.kt)("li",{parentName:"ul"},"slower than integer types")))),(0,i.kt)("h3",{id:"beware-of-autogenerated-schemas"},"BEWARE OF AUTOGENERATED SCHEMAS"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Performance problem",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"large ",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR")," for everything"),(0,i.kt)("li",{parentName:"ul"},"different types for columns that will be compared in ",(0,i.kt)("inlineCode",{parentName:"li"},"JOIN"))))),(0,i.kt)("h3",{id:"special-data-types"},"Special data types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"IPv4: It's unsigned integers, not string. ",(0,i.kt)("inlineCode",{parentName:"li"},"INET_ATON()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"INET_NTOA()"))),(0,i.kt)("h3",{id:"schema-design-gotchas"},"Schema Design Gotchas"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Too many columns",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Storage engine API works by copying rows between the server and the storage engine in a row buffer format. The server decodes the buffer into columns. The cost of this conversion depends on the number of columns"),(0,i.kt)("li",{parentName:"ul"},"High CPU consumption for wide tables, even though only a few columns were actually used"))),(0,i.kt)("li",{parentName:"ul"},"Too many joins",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"MySQL limit 61 tables per join.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ENUM"),": A new enum cannot be added without an ",(0,i.kt)("inlineCode",{parentName:"li"},"ALTER TABLE"),", which is a blocking operation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NULL"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NULL"),' can be replaced by a "no value" (zero, special value, empty string, ...). But handling ',(0,i.kt)("inlineCode",{parentName:"li"},"NULL")," is ofter better than the alternative"),(0,i.kt)("li",{parentName:"ul"},"MySQL does index ",(0,i.kt)("inlineCode",{parentName:"li"},"NULL"))))),(0,i.kt)("h3",{id:"normalization-and-denormalization"},"Normalization and Denormalization"),(0,i.kt)("h4",{id:"normalized"},"Normalized"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Normalized updates are usually faster than denormalized updates")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Less duplicated data, less data to change")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Normalized data are usually smaller")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Drawbacks: Requires joins, can make some indexing strategies impossible"))),(0,i.kt)("h4",{id:"denormalized"},"Denormalized"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Avoid joins")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Even a full table scan can be much faster than a join when the data doesn't fit in memory")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Allows more efficient indexing strategies"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT message_text, user_name\nFROM message\n  INNER JOIN user ON message.user_id = user.id\nWHERE user.account_type = 'premium'\nORDER BY message.published DESC\nLIMIT 10;\n")),(0,i.kt)("p",{parentName:"li"},"\u2192 MySQL scan the ",(0,i.kt)("inlineCode",{parentName:"p"},"published")," index on ",(0,i.kt)("inlineCode",{parentName:"p"},"message")," table. For each row, it will need to probe into the ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," table and check whether the user is a premium user."),(0,i.kt)("p",{parentName:"li"},"\u2192 Inefficient if only a small fraction of users have premium accounts"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT message_text, user_name\nFROM user_message\nWHERE account_type = 'premium'\nORDER_BY published DESC\nLIMIT 10;\n")),(0,i.kt)("p",{parentName:"li"},"index on ",(0,i.kt)("inlineCode",{parentName:"p"},"(account_type, published)")," is needed to make the query efficient"))),(0,i.kt)("p",null,"\u2192 Mixture of normalized and denormalized"),(0,i.kt)("h3",{id:"cache-and-summary-tables"},"Cache and Summary Tables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Khi c\u1ea7n statistics l\u1edbn, v\u1edbi \u0111\u1ed9 ch\xednh x\xe1c cao."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"B\u1eaft \u0111\u1ea7u v\u1edbi summary table (v\xed d\u1ee5 interval 1h)"),(0,i.kt)("li",{parentName:"ul"},"Ta c\xf3 th\u1ec3 t\xednh \u0111\u01b0\u1ee3c count c\u1ee7a 24h g\u1ea7n \u0111\xe2y nh\u1ea5t b\u1eb1ng c\xe1ch l\u1ea5y t\u1ed5ng count trong 23h t\u1eeb summary table + v\u1edbi count c\u1ee7a 1h t\xednh t\u1eeb b\u1ea3ng th\u1ef1c ")),(0,i.kt)("p",{parentName:"li"},"\u2192 gi\u1ea3m thi\u1ec3u s\u1ed1 l\u01b0\u1ee3ng data g\u1ea7n count"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT SUM(cnt) FROM msg_per_hr\n  WHERE hr BETWEEN\n    CONCAT(LEFT(NOW(), 14), '00:00') - INTERVAL 23 HOUR\n    AND CONCAT(LEFT(NOW(), 14), '00:00') - INTERVAL 1 HOUR;\nSELECT COUNT(*) FROM message\n  WHERE posted >= NOW() - INTERVAL 24 HOUR\n    AND posted < CONCAT(LEFT(NOW(), 14), '00:00') - INTERVAL 23 HOUR;\nSELECT COUNT(*) FROM message\n  WHERE posted >= CONCAT(LEFT(NOW(), 14), '00:00');\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"V\u1edbi c\xe1c table lo\u1ea1i n\xe0y, c\xf3 th\u1ec3 d\xf9ng storage engine kh\xe1c \u0111\u1ec3 t\u1ed1i \u01b0u.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'N\u1ebfu mu\u1ed1n rebuild summary & cache tables, c\xf3 th\u1ec3 d\xf9ng t\u1edbi ph\u01b0\u01a1ng ph\xe1p "shadow table"'),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-mysql"},"DROP TABLE IF EXISTS my_summary_new, my_summary_old;\nCREATE TABLE my_summary_new LIKE my_summary;\n# ...populate my_summary_new with new data\nRENAME TABLE my_summary TO my_summary_old, my_summary_new TO my_summary;\n")),(0,i.kt)("p",{parentName:"li"},"C\xf3 th\u1ec3 gi\u1eef l\u1ea1i ",(0,i.kt)("inlineCode",{parentName:"p"},"my_summary")," \u0111\u1ec3 c\xf3 th\u1ec3 rollback m\u1ed9t c\xe1ch nhanh ch\xf3ng."))),(0,i.kt)("h3",{id:"counter-tables"},"Counter Tables"),(0,i.kt)("p",null,"Concurrency problems when updating the counters"),(0,i.kt)("p",null,"\u2192 T\u1ea1o ra nhi\u1ec1u row, khi increase th\xec ch\u1ecdn random 1 row \u0111\u1ec3 increase. Count b\u1eb1ng c\xe1ch t\xednh t\u1ed5ng"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Faster reads, Slower writes")),(0,i.kt)("h3",{id:"indexing"},"Indexing"))}u.isMDXComponent=!0},6579:function(e,t,a){"use strict";t.Z=a.p+"assets/images/architecture-164627ccd1c9c9713bc0d80bce987fae.png"}}]);